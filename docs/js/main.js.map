{"version":3,"names":[],"mappings":"","sources":["main.ts"],"sourcesContent":["import { MtmControl } from \"./controls/control\";\nimport { MtmGroup } from \"./controls/group\";\nimport { MtmSelect } from \"./controls/select\";\nimport { MtmValue } from \"./controls/value\";\nimport MtmDataService from \"./models/data.service\";\nimport Dom from \"./utils/dom\";\n\nexport default class MtmConfigurator {\n\n\telement: HTMLElement;\n\toptions: MtmControl[];\n\tcols: MtmControl[] = [];\n\trows: number[][] = [];\n\n\tconstructor(selector: string) {\n\t\tthis.element = document.querySelector(selector) as HTMLElement;\n\t\tthis.addMediaScrollListener();\n\t\tthis.addRecapScrollListener();\n\t\tMtmDataService.fetch((cols: MtmControl[], rows: number[][]) => {\n\t\t\tthis.cols = cols;\n\t\t\tthis.rows = rows;\n\t\t\tlet options = [\n\t\t\t\tnew MtmGroup({\n\t\t\t\t\tkey: 'knownTecnology',\n\t\t\t\t\tname: 'Conosci già la tecnologia da adottare?',\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{ id: 1, name: 'No' },\n\t\t\t\t\t\t{ id: 2, name: 'Sì' },\n\t\t\t\t\t],\n\t\t\t\t\tclassName: 'btn-group--sm',\n\t\t\t\t}),\n\t\t\t\tnew MtmGroup({\n\t\t\t\t\tkey: 'constrainedDimension',\n\t\t\t\t\tname: 'Hai un vincolo sul numero di moduli e dimensione del pannello?',\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{ id: 1, name: 'No' },\n\t\t\t\t\t\t{ id: 2, name: 'Sì' },\n\t\t\t\t\t],\n\t\t\t\t\tclassName: 'btn-group--sm'\n\t\t\t\t}),\n\t\t\t\tnew MtmSelect({\n\t\t\t\t\tkey: 'apartmentNumber',\n\t\t\t\t\tname: 'Quanti appartamenti o punti interni devi gestire?',\n\t\t\t\t\tvalues: new Array(20).fill(0).map((x: number, i: number) => {\n\t\t\t\t\t\treturn { id: i + 1, name: (i + 1).toFixed(0) };\n\t\t\t\t\t})\n\t\t\t\t}),\n\t\t\t\tMtmDataService.optionWithKey('audioVideo'),\n\t\t\t\tMtmDataService.optionWithKey('keypad'),\n\t\t\t\tMtmDataService.optionWithKey('infoModule'),\n\t\t\t\tMtmDataService.optionWithKey('proximity'),\n\t\t\t\tMtmDataService.optionWithKey('finish'),\n\t\t\t\tMtmDataService.optionWithKey('mount'),\n\t\t\t\tMtmDataService.optionWithKey('system'),\n\t\t\t\tMtmDataService.optionWithKey('moduleSize'),\n\t\t\t];\n\t\t\toptions.forEach(x => x.didChange = (item: MtmValue, control: MtmControl) => {\n\t\t\t\tconsole.log('MtmConfigurator.didChange', control.key, item);\n\t\t\t\tswitch (control.key) {\n\t\t\t\t\tcase 'knownTecnology':\n\t\t\t\t\t\tconst controls = this.options.map(x => x.element);\n\t\t\t\t\t\tcontrols.unshift(controls.pop());\n\t\t\t\t\t\tconst outlet = this.element.querySelector('.options-outlet') as HTMLElement;\n\t\t\t\t\t\tcontrols.forEach(x => outlet.appendChild(x));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'constrainedDimension':\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.onSearch();\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.options = options;\n\t\t\tthis.render();\n\t\t\tthis.onSearch();\n\t\t}, (error: any) => {\n\t\t\tconsole.log('error', error);\n\t\t});\n\t}\n\n\tonSearch() {\n\t\t// FILTERS\n\t\tconst filters = this.options.map(x => {\n\t\t\tconst index = this.cols.indexOf(x);\n\t\t\tif (index !== -1) {\n\t\t\t\tconst control = x;\n\t\t\t\tconst selectedValue = x.values.find(v => v.active);\n\t\t\t\tconst value = selectedValue ? selectedValue.id : -1;\n\t\t\t\tconst price = selectedValue ? selectedValue.price : 0;\n\t\t\t\treturn { index, value, price, control };\n\t\t\t} else {\n\t\t\t\treturn { index };\n\t\t\t}\n\t\t}).filter(x => x.index !== -1 && x.value !== 0);\n\t\t// TOTALPRICE ?\n\t\tconst totalPrice = filters.reduce((p, x) => {\n\t\t\tconsole.log(p, x.price);\n\t\t\treturn p + x.price;\n\t\t}, 0);\n\t\t// FILTER RESULTS\n\t\tconst results = this.rows.filter(x => {\n\t\t\tlet has = true;\n\t\t\tfilters.forEach(f => has = has && x[f.index] === f.value);\n\t\t\treturn has;\n\t\t}).map(r => {\n\t\t\tconst result: any = {};\n\t\t\tthis.cols.forEach((c, i) => {\n\t\t\t\tconst value = c.values.find(v => v.id === r[i]);\n\t\t\t\tresult[c.key] = value ? value.name : '-';\n\t\t\t});\n\t\t\treturn result;\n\t\t});\n\t\tif (results.length > 0) {\n\t\t\tconst result = results[0];\n\t\t\tthis.element.querySelector('.result-price').innerHTML = `€ ${totalPrice.toFixed(2)}`;\n\t\t\tthis.element.querySelector('.result-code').innerHTML = result.code;\n\t\t\t// this.element.querySelectorAll('.result-code').forEach(x => x.innerHTML = result.code);\n\t\t\tthis.element.querySelector('.result-description').innerHTML = result.Description;\n\t\t\tif (results.length === 1) {\n\t\t\t\tconsole.log('MtmConfigurato.onSearch', result);\n\t\t\t} else {\n\t\t\t\tconsole.log('onSearch.error', results);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log('onSearch.error', results);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst outlet = this.element.querySelector('.options-outlet') as HTMLElement;\n\t\tthis.options.map(x => x.render()).forEach(x => outlet.appendChild(x));\n\t\tconsole.log('render.outlet', outlet);\n\t}\n\n\taddMediaScrollListener() {\n\t\tconst media = this.element.querySelector('.media') as HTMLElement;\n\t\tconst picture = media.querySelector('.picture') as HTMLElement;\n\t\tconst onScroll = () => {\n\t\t\tconst rect: ClientRect | DOMRect = media.getBoundingClientRect();\n\t\t\tif (rect.top < 60) {\n\t\t\t\tDom.addClass(picture, 'fixed');\n\t\t\t} else {\n\t\t\t\tDom.removeClass(picture, 'fixed');\n\t\t\t}\n\t\t};\n\t\tonScroll();\n\t\twindow.addEventListener('scroll', onScroll, false);\n\t}\n\n\taddRecapScrollListener() {\n\t\tconst inner = this.element.querySelector('.section--recap > .inner') as HTMLElement;\n\t\tvar lastScrollTop = Dom.scrollTop();\n\t\tconst onScroll = () => {\n\t\t\tvar scrollTop = Dom.scrollTop();\n\t\t\tif (scrollTop > lastScrollTop) {\n\t\t\t\tDom.addClass(inner, 'fixed');\n\t\t\t} else {\n\t\t\t\tDom.removeClass(inner, 'fixed');\n\t\t\t}\n\t\t\tlastScrollTop = scrollTop <= 0 ? 0 : scrollTop; // For Mobile or negative scrolling\n\t\t};\n\t\tonScroll();\n\t\twindow.addEventListener('scroll', onScroll, false);\n\t}\n\n}\n\nconst configurator = new MtmConfigurator(`.configurator`);\n"],"file":"main.js"}