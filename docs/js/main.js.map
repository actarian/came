{"version":3,"names":[],"mappings":"","sources":["main.ts"],"sourcesContent":["import { MtmControlEnum } from \"./controls/constants\";\nimport { MtmControl } from \"./controls/control\";\nimport { MtmValue } from \"./controls/value\";\nimport MtmDataService from \"./models/data.service\";\nimport Dom from \"./utils/dom\";\n\nexport default class MtmConfigurator {\n\n\telement: HTMLElement;\n\toptions: MtmControl[];\n\tcols: MtmControl[] = [];\n\trows: number[][] = [];\n\n\tconstructor(selector: string) {\n\t\tthis.element = document.querySelector(selector) as HTMLElement;\n\t\tthis.addMediaScrollListener();\n\t\tthis.addRecapScrollListener();\n\t\tMtmDataService.fetch((cols: MtmControl[], rows: number[][]) => {\n\t\t\tthis.cols = cols;\n\t\t\tthis.rows = rows;\n\t\t\tlet options = [\n\t\t\t\tMtmDataService.newControlByKey(MtmControlEnum.KnownTecnology),\n\t\t\t\tMtmDataService.newControlByKey(MtmControlEnum.ConstrainedDimension),\n\t\t\t\tMtmDataService.newControlByKey(MtmControlEnum.ApartmentNumber),\n\t\t\t\tMtmDataService.newControlByKey(MtmControlEnum.CallButtons),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.AudioVideo),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.Keypad),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.InfoModule),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.Proximity),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.Finish),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.Mount),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.System),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.ModuleSize),\n\t\t\t];\n\t\t\toptions.forEach(x => x.didChange = (item: MtmValue, control: MtmControl) => {\n\t\t\t\tconsole.log('MtmConfigurator.didChange', control.key, item);\n\t\t\t\tswitch (control.key) {\n\t\t\t\t\tcase MtmControlEnum.KnownTecnology:\n\t\t\t\t\tcase MtmControlEnum.ConstrainedDimension:\n\t\t\t\t\t\tthis.doReorder();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MtmControlEnum.ApartmentNumber:\n\t\t\t\t\t\tthis.updateCallButtons();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MtmControlEnum.CallButtons:\n\t\t\t\t\t\tthis.didSelectCallButton();\n\t\t\t\t\t\tthis.onSearch();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.onSearch();\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.options = options;\n\t\t\tthis.initCallButtons();\n\t\t\tthis.render();\n\t\t\tthis.updateCallButtons();\n\t\t\tthis.didSelectCallButton();\n\t\t\tthis.onSearch();\n\t\t}, (error: any) => {\n\t\t\tconsole.log('error', error);\n\t\t});\n\t}\n\n\tinitCallButtons() {\n\t\tconst buttons = MtmDataService.optionWithKey(MtmControlEnum.Buttons);\n\t\tconst digi1 = buttons.values.filter(x => x.name === 'DIGI1');\n\t\tconst digi2 = buttons.values.filter(x => x.name === 'DIGI2');\n\t\tconst numericButtons = buttons.values.filter(x => parseInt(x.name).toString() === x.name);\n\t\tconst digitalDisplay = MtmDataService.optionWithKey(MtmControlEnum.DigitalDisplay);\n\t\tconst digitalDisplayButton = digitalDisplay.values.find(x => x.name === 'Digital Display');\n\t\t// console.log(buttons.values); // 26\n\t\t// Modulo 1 Pulsante\n\t\tconst values: MtmValue[] = [];\n\t\tlet i = 0;\n\t\tvalues.push(new MtmValue({\n\t\t\tid: ++i,\n\t\t\tname: `DIGI1`,\n\t\t\tvalue: 1,\n\t\t\torder: 10 - 1,\n\t\t\tdata: { buttons: digi1 }\n\t\t}));\n\t\tvalues.push(new MtmValue({\n\t\t\tid: ++i,\n\t\t\tname: `DIGI2`,\n\t\t\tvalue: 2,\n\t\t\torder: 20 - 2,\n\t\t\tdata: { buttons: digi2 }\n\t\t}));\n\t\tnumericButtons.forEach(x => {\n\t\t\tconst value = parseInt(x.name);\n\t\t\tvalues.push(new MtmValue({\n\t\t\t\tid: ++i,\n\t\t\t\tname: `Modulo ${value > 1 ? value + ' pulsanti' : '1 pulsante'}`,\n\t\t\t\tvalue: value,\n\t\t\t\torder: value * 10,\n\t\t\t\tdata: { buttons: x }\n\t\t\t}));\n\t\t\tvalues.push(new MtmValue({\n\t\t\t\tid: ++i,\n\t\t\t\tname: `Modulo DIGI1 + ${value > 1 ? value + ' pulsanti' : '1 pulsante'}`,\n\t\t\t\tvalue: value + 1,\n\t\t\t\torder: (value + 1) * 10 - 1,\n\t\t\t\tdata: { buttons: x } // + digi1\n\t\t\t}));\n\t\t\tvalues.push(new MtmValue({\n\t\t\t\tid: ++i,\n\t\t\t\tname: `Modulo DIGI2 + ${value > 1 ? value + ' pulsanti' : '1 pulsante'}`,\n\t\t\t\tvalue: value + 2,\n\t\t\t\torder: (value + 2) * 10 - 2,\n\t\t\t\tdata: { buttons: x } // + digi2\n\t\t\t}));\n\t\t})\n\t\tvalues.push(new MtmValue({\n\t\t\tid: ++i,\n\t\t\tname: `Digital Display`,\n\t\t\tvalue: 1000,\n\t\t\torder: 10000,\n\t\t\tdata: { digitalDisplay: digitalDisplayButton }\n\t\t}))\n\t\tvalues.sort((a, b) => (a.order > b.order) ? 1 : ((b.order > a.order) ? -1 : 0));\n\t\tconst callButtons = this.options.find(x => x.key === MtmControlEnum.CallButtons);\n\t\tcallButtons.values = values;\n\t\tcallButtons.values.forEach((x, i) => x.price = 4.99 * i);\n\t\tif (callButtons.values.length) {\n\t\t\tcallButtons.values[0].active = true;\n\t\t\tcallButtons.currentItem = callButtons.values[0];\n\t\t}\n\t}\n\n\tupdateCallButtons() {\n\t\tconst apartmentNumber = this.options.find(x => x.key === MtmControlEnum.ApartmentNumber);\n\t\tconst apartmentNumberValue = apartmentNumber.currentItem.id;\n\t\tconst callButtons = this.options.find(x => x.key === MtmControlEnum.CallButtons);\n\t\tcallButtons.values.forEach(x => {\n\t\t\tswitch (x.name) {\n\t\t\t\tcase 'Digital Display':\n\t\t\t\t\tx.disabled = false;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tx.disabled = x.value !== apartmentNumberValue;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\t// console.log(callButtons.values.filter(x => !x.disabled).map(x => x.name));\n\t\tcallButtons.updateState();\n\t\t// const callButtonsCurrentItem = callButtons.currentItem;\n\t\t// console.log('updateCallButtons', apartmentNumberValue, callButtonsCurrentItem.name);\n\t}\n\n\tdidSelectCallButton() {\n\t\tconst buttons = MtmDataService.optionWithKey(MtmControlEnum.Buttons);\n\t\tconst digitalDisplay = MtmDataService.optionWithKey(MtmControlEnum.DigitalDisplay);\n\t\tconst callButtons = this.options.find(x => x.key === MtmControlEnum.CallButtons);\n\t\tconsole.log('didSelectCallButton.currentItem =>', callButtons.currentItem);\n\t\tif (callButtons.currentItem && callButtons.currentItem.data) {\n\t\t\tbuttons.onSelect(callButtons.currentItem.data.buttons);\n\t\t\tdigitalDisplay.onSelect(callButtons.currentItem.data.digitalDisplay);\n\t\t}\n\t\t/*\n\t\tbuttons.values.forEach(x => x.active = false);\n\t\tdigitalDisplay.values.forEach(x => x.active = false);\n\t\tif (callButtons.currentItem.name === 'Digital Display') {\n\t\t\tdigitalDisplay.currentItem = digitalDisplay.values.find(x => x.id === callButtons.currentItem.id);\n\t\t\tdigitalDisplay.currentItem.active = true;\n\t\t\tbuttons.currentItem = null;\n\t\t} else {\n\t\t\tbuttons.currentItem = buttons.values.find(x => x.id === callButtons.currentItem.id);\n\t\t\tbuttons.currentItem.active = true;\n\t\t\tdigitalDisplay.currentItem = null;\n\t\t}\n\t\t*/\n\t}\n\n\tdoReorder() {\n\t\tconst controls = [];\n\t\tconst knownTecnology = this.options.find(x => x.key === MtmControlEnum.KnownTecnology);\n\t\tconst system = this.options.find(x => x.key === MtmControlEnum.System);\n\t\tconst constrainedDimension = this.options.find(x => x.key === MtmControlEnum.ConstrainedDimension);\n\t\tconst moduleSize = this.options.find(x => x.key === MtmControlEnum.ModuleSize);\n\t\tcontrols.push(knownTecnology.element);\n\t\tif (knownTecnology.currentItem.id === 2) {\n\t\t\tcontrols.push(system.element);\n\t\t}\n\t\tcontrols.push(constrainedDimension.element);\n\t\tif (constrainedDimension.currentItem.id === 2) {\n\t\t\tcontrols.push(moduleSize.element);\n\t\t}\n\t\tconst apartmentNumber = this.options.find(x => x.key === MtmControlEnum.ApartmentNumber);\n\t\tconst callButtons = this.options.find(x => x.key === MtmControlEnum.CallButtons);\n\t\tconst audioVideo = this.options.find(x => x.key === MtmControlEnum.AudioVideo);\n\t\tconst keypad = this.options.find(x => x.key === MtmControlEnum.Keypad);\n\t\tconst infoModule = this.options.find(x => x.key === MtmControlEnum.InfoModule);\n\t\tconst proximity = this.options.find(x => x.key === MtmControlEnum.Proximity);\n\t\tconst finish = this.options.find(x => x.key === MtmControlEnum.Finish);\n\t\tconst mount = this.options.find(x => x.key === MtmControlEnum.Mount);\n\t\tcontrols.push(apartmentNumber.element);\n\t\tcontrols.push(callButtons.element);\n\t\tcontrols.push(audioVideo.element);\n\t\tcontrols.push(keypad.element);\n\t\tcontrols.push(infoModule.element);\n\t\tcontrols.push(proximity.element);\n\t\tcontrols.push(finish.element);\n\t\tcontrols.push(mount.element);\n\t\tif (knownTecnology.currentItem.id === 1) {\n\t\t\tcontrols.push(system.element);\n\t\t}\n\t\tif (constrainedDimension.currentItem.id === 1) {\n\t\t\tcontrols.push(moduleSize.element);\n\t\t}\n\t\t// const controls = this.options.map(x => x.element);\n\t\t// controls.unshift(controls.pop());\n\t\tthis.options.map(x => x.element).forEach(x => {\n\t\t\tif (x.parentNode) {\n\t\t\t\tx.parentNode.removeChild(x);\n\t\t\t}\n\t\t})\n\t\tconst outlet = this.element.querySelector('.options-outlet') as HTMLElement;\n\t\tcontrols.forEach(x => outlet.appendChild(x));\n\t\t// console.log('doReorder');\n\t}\n\n\tonSearch() {\n\t\t// FILTERS\n\t\tconst filters = this.options.map(x => {\n\t\t\tconst index = this.cols.indexOf(x);\n\t\t\tif (index !== -1) {\n\t\t\t\tconst control = x;\n\t\t\t\tconst selectedValue = x.values.find(v => v.active);\n\t\t\t\tconst value = selectedValue ? selectedValue.id : -1;\n\t\t\t\tconst price = selectedValue ? selectedValue.price : 0;\n\t\t\t\treturn { index, value, price, control };\n\t\t\t} else {\n\t\t\t\treturn { index };\n\t\t\t}\n\t\t}).filter(x => x.index !== -1 && x.value !== 0);\n\t\t// TOTALPRICE ?\n\t\tconst totalPrice = filters.reduce((p, x) => {\n\t\t\t// console.log(p, x.price);\n\t\t\treturn p + x.price;\n\t\t}, 0);\n\t\t// FILTER RESULTS\n\t\tconst results = this.rows.filter(x => {\n\t\t\tlet has = true;\n\t\t\tfilters.forEach(f => has = has && x[f.index] === f.value);\n\t\t\treturn has;\n\t\t}).map(r => {\n\t\t\tconst result: any = {};\n\t\t\tthis.cols.forEach((c, i) => {\n\t\t\t\tconst value = c.values.find(v => v.id === r[i]);\n\t\t\t\tresult[c.key] = value ? value.name : '-';\n\t\t\t});\n\t\t\treturn result;\n\t\t});\n\t\tif (results.length > 0) {\n\t\t\tconst result = results[0];\n\t\t\tthis.element.querySelector('.result-price').innerHTML = `€ ${totalPrice.toFixed(2)}`;\n\t\t\tthis.element.querySelector('.result-code').innerHTML = result.code;\n\t\t\t// this.element.querySelectorAll('.result-code').forEach(x => x.innerHTML = result.code);\n\t\t\tthis.element.querySelector('.result-description').innerHTML = result.Description;\n\t\t\tif (results.length === 1) {\n\t\t\t\tconsole.log('MtmConfigurato.onSearch', result);\n\t\t\t} else {\n\t\t\t\tconsole.log('onSearch.error', results);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log('onSearch.error', results);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst outlet = this.element.querySelector('.options-outlet') as HTMLElement;\n\t\tthis.options.map(x => x.render()).forEach(x => outlet.appendChild(x));\n\t\t// console.log('render.outlet', outlet);\n\t}\n\n\taddMediaScrollListener() {\n\t\tconst media = this.element.querySelector('.media') as HTMLElement;\n\t\tconst picture = media.querySelector('.picture') as HTMLElement;\n\t\tconst onScroll = () => {\n\t\t\tconst rect: ClientRect | DOMRect = media.getBoundingClientRect();\n\t\t\tif (rect.top < 60) {\n\t\t\t\tDom.addClass(picture, 'fixed');\n\t\t\t} else {\n\t\t\t\tDom.removeClass(picture, 'fixed');\n\t\t\t}\n\t\t};\n\t\tonScroll();\n\t\twindow.addEventListener('scroll', onScroll, false);\n\t}\n\n\taddRecapScrollListener() {\n\t\tconst inner = this.element.querySelector('.section--recap > .inner') as HTMLElement;\n\t\tvar lastScrollTop = Dom.scrollTop();\n\t\tconst onScroll = () => {\n\t\t\tvar scrollTop = Dom.scrollTop();\n\t\t\tif (scrollTop > lastScrollTop) {\n\t\t\t\tDom.addClass(inner, 'fixed');\n\t\t\t} else {\n\t\t\t\tDom.removeClass(inner, 'fixed');\n\t\t\t}\n\t\t\tlastScrollTop = scrollTop <= 0 ? 0 : scrollTop; // For Mobile or negative scrolling\n\t\t};\n\t\tonScroll();\n\t\twindow.addEventListener('scroll', onScroll, false);\n\t}\n\n}\n\nconst configurator = new MtmConfigurator(`.configurator`);\n"],"file":"main.js"}