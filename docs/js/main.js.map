{"version":3,"names":[],"mappings":"","sources":["main.ts"],"sourcesContent":["import { MtmControl } from \"./controls/control\";\nimport { MtmGroup } from \"./controls/group\";\nimport { MtmSelect } from \"./controls/select\";\nimport { MtmValue } from \"./controls/value\";\nimport MtmDataService from \"./models/data.service\";\nimport Dom from \"./utils/dom\";\n\nexport default class MtmConfigurator {\n\n\telement: HTMLElement;\n\toptions: MtmControl[];\n\n\tconstructor(selector: string) {\n\t\tthis.element = document.querySelector(selector) as HTMLElement;\n\t\tthis.addMediaScrollListener();\n\t\tthis.addRecapScrollListener();\n\t\tMtmDataService.fetch((cols: MtmControl[], rows: number[][]) => {\n\t\t\tconsole.log(cols[0]);\n\t\t\tconsole.log(rows[0]);\n\t\t\tlet options = [\n\t\t\t\tnew MtmGroup({\n\t\t\t\t\tkey: 'knownTecnology',\n\t\t\t\t\tname: 'Conosci già la tecnologia da adottare?',\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{ id: 1, name: 'No' },\n\t\t\t\t\t\t{ id: 2, name: 'Sì' },\n\t\t\t\t\t],\n\t\t\t\t\tclassName: 'btn-group--sm',\n\t\t\t\t}),\n\t\t\t\tnew MtmGroup({\n\t\t\t\t\tkey: 'constrainedDimension',\n\t\t\t\t\tname: 'Hai un vincolo sul numero di moduli e dimensione del pannello?',\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{ id: 1, name: 'No' },\n\t\t\t\t\t\t{ id: 2, name: 'Sì' },\n\t\t\t\t\t],\n\t\t\t\t\tclassName: 'btn-group--sm'\n\t\t\t\t}),\n\t\t\t\tnew MtmSelect({\n\t\t\t\t\tkey: 'apartmentNumber',\n\t\t\t\t\tname: 'Quanti appartamenti o punti interni devi gestire?',\n\t\t\t\t\tvalues: new Array(20).fill(0).map((x: number, i: number) => {\n\t\t\t\t\t\treturn { id: i + 1, name: (i + 1).toFixed(0) };\n\t\t\t\t\t})\n\t\t\t\t}),\n\t\t\t\tMtmDataService.optionWithKey('audioVideo'),\n\t\t\t\tMtmDataService.optionWithKey('keypad'),\n\t\t\t\tMtmDataService.optionWithKey('infoModule'),\n\t\t\t\tMtmDataService.optionWithKey('proximity'),\n\t\t\t\tMtmDataService.optionWithKey('system'),\n\t\t\t\tMtmDataService.optionWithKey('moduleSize'),\n\t\t\t];\n\t\t\toptions.forEach(x => x.didChange = (item: MtmValue, control: MtmControl) => {\n\t\t\t\tconsole.log('MtmConfigurator.didChange', control.key, item);\n\t\t\t\tswitch (control.key) {\n\t\t\t\t\tcase 'knownTecnology':\n\t\t\t\t\t\tconst controls = this.options.map(x => x.element);\n\t\t\t\t\t\tcontrols.unshift(controls.pop());\n\t\t\t\t\t\tconst outlet = this.element.querySelector('.options-outlet') as HTMLElement;\n\t\t\t\t\t\tcontrols.forEach(x => outlet.appendChild(x));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'constrainedDimension':\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.options = options;\n\t\t\tthis.render();\n\t\t}, (error: any) => {\n\t\t\tconsole.log('error', error);\n\t\t});\n\t}\n\n\trender() {\n\t\tconst outlet = this.element.querySelector('.options-outlet') as HTMLElement;\n\t\tthis.options.map(x => x.render()).forEach(x => outlet.appendChild(x));\n\t\tconsole.log('render.outlet', outlet);\n\t}\n\n\taddMediaScrollListener() {\n\t\tconst media = this.element.querySelector('.media') as HTMLElement;\n\t\tconst picture = media.querySelector('.picture') as HTMLElement;\n\t\tconst onScroll = () => {\n\t\t\tconst rect: ClientRect | DOMRect = media.getBoundingClientRect();\n\t\t\tif (rect.top < 60) {\n\t\t\t\tDom.addClass(picture, 'fixed');\n\t\t\t} else {\n\t\t\t\tDom.removeClass(picture, 'fixed');\n\t\t\t}\n\t\t};\n\t\tonScroll();\n\t\twindow.addEventListener('scroll', onScroll, false);\n\t}\n\n\taddRecapScrollListener() {\n\t\tconst inner = this.element.querySelector('.section--recap > .inner') as HTMLElement;\n\t\tvar lastScrollTop = Dom.scrollTop();\n\t\tconst onScroll = () => {\n\t\t\tvar scrollTop = Dom.scrollTop();\n\t\t\tif (scrollTop > lastScrollTop) {\n\t\t\t\tDom.addClass(inner, 'fixed');\n\t\t\t} else {\n\t\t\t\tDom.removeClass(inner, 'fixed');\n\t\t\t}\n\t\t\tlastScrollTop = scrollTop <= 0 ? 0 : scrollTop; // For Mobile or negative scrolling\n\t\t};\n\t\tonScroll();\n\t\twindow.addEventListener('scroll', onScroll, false);\n\t}\n\n}\n\nconst configurator = new MtmConfigurator(`.configurator`);\n"],"file":"main.js"}