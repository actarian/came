var _gsScope;((_gsScope="undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window)._gsQueue||(_gsScope._gsQueue=[])).push(function(){"use strict";_gsScope._gsDefine("easing.Back",["easing.Ease"],function(d){var i,s,e,t,r=_gsScope.GreenSockGlobals||_gsScope,n=r.com.greensock,a=2*Math.PI,o=Math.PI/2,l=n._class,h=function(t,e){var i=l("easing."+t,function(){},!0),s=i.prototype=new d;return s.constructor=i,s.getRatio=e,i},_=d.register||function(){},u=function(t,e,i,s,r){var n=l("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new s},!0);return _(n,t),n},g=function(t,e,i){this.t=t,this.v=e,i&&(((this.next=i).prev=this).c=i.v-e,this.gap=i.t-t)},c=function(t,e){var i=l("easing."+t,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),s=i.prototype=new d;return s.constructor=i,s.getRatio=e,s.config=function(t){return new i(t)},i},f=u("Back",c("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),c("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),c("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),p=l("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:1<t&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=!0===i},!0),m=p.prototype=new d;return m.constructor=p,m.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1===t?0:1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},p.ease=new p(.7,.7),m.config=p.config=function(t,e,i){return new p(t,e,i)},(m=(i=l("easing.SteppedEase",function(t,e){t=t||1,this._p1=1/t,this._p2=t+(e?0:1),this._p3=e?1:0},!0)).prototype=new d).constructor=i,m.getRatio=function(t){return t<0?t=0:1<=t&&(t=.999999999),((this._p2*t|0)+this._p3)*this._p1},m.config=i.config=function(t,e){return new i(t,e)},(m=(s=l("easing.ExpoScaleEase",function(t,e,i){this._p1=Math.log(e/t),this._p2=e-t,this._p3=t,this._ease=i},!0)).prototype=new d).constructor=s,m.getRatio=function(t){return this._ease&&(t=this._ease.getRatio(t)),(this._p3*Math.exp(this._p1*t)-this._p3)/this._p2},m.config=s.config=function(t,e,i){return new s(t,e,i)},(m=(e=l("easing.RoughEase",function(t){for(var e,i,s,r,n,a,o=(t=t||{}).taper||"none",l=[],h=0,_=0|(t.points||20),u=_,c=!1!==t.randomize,f=!0===t.clamp,p=t.template instanceof d?t.template:null,m="number"==typeof t.strength?.4*t.strength:.4;-1<--u;)e=c?Math.random():1/_*u,i=p?p.getRatio(e):e,s="none"===o?m:"out"===o?(r=1-e)*r*m:"in"===o?e*e*m:e<.5?(r=2*e)*r*.5*m:(r=2*(1-e))*r*.5*m,c?i+=Math.random()*s-.5*s:u%2?i+=.5*s:i-=.5*s,f&&(1<i?i=1:i<0&&(i=0)),l[h++]={x:e,y:i};for(l.sort(function(t,e){return t.x-e.x}),a=new g(1,1,null),u=_;-1<--u;)n=l[u],a=new g(n.x,n.y,a);this._prev=new g(0,0,0!==a.t?a:a.next)},!0)).prototype=new d).constructor=e,m.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return(this._prev=e).v+(t-e.t)/e.gap*e.c},m.config=function(t){return new e(t)},e.ease=new e,u("Bounce",h("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),h("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),h("BounceInOut",function(t){var e=t<.5;return(t=e?1-2*t:2*t-1)<1/2.75?t*=7.5625*t:t=t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),u("Circ",h("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),h("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),h("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),u("Elastic",(t=function(t,e,i){var s=l("easing."+t,function(t,e){this._p1=1<=t?t:1,this._p2=(e||i)/(t<1?t:1),this._p3=this._p2/a*(Math.asin(1/this._p1)||0),this._p2=a/this._p2},!0),r=s.prototype=new d;return r.constructor=s,r.getRatio=e,r.config=function(t,e){return new s(t,e)},s})("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),t("ElasticIn",function(t){return-this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)},.3),t("ElasticInOut",function(t){return(t*=2)<1?this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),u("Expo",h("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),h("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),h("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),u("Sine",h("SineOut",function(t){return Math.sin(t*o)}),h("SineIn",function(t){return 1-Math.cos(t*o)}),h("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),l("easing.EaseLookup",{find:function(t){return d.map[t]}},!0),_(r.SlowMo,"SlowMo","ease,"),_(e,"RoughEase","ease,"),_(i,"SteppedEase","ease,"),f},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()(),function(){"use strict";var t=function(){return _gsScope.GreenSockGlobals||_gsScope};"undefined"!=typeof module&&module.exports?(require("../TweenLite.js"),module.exports=t()):"function"==typeof define&&define.amd&&define(["TweenLite"],t)}(),function(c,f){"use strict";var p={},s=c.document,m=c.GreenSockGlobals=c.GreenSockGlobals||c,t=m[f];if(t)return"undefined"!=typeof module&&module.exports&&(module.exports=t);var e,i,r,d,g,n,a,v=function(t){var e,i=t.split("."),s=m;for(e=0;e<i.length;e++)s[i[e]]=s=s[i[e]]||{};return s},u=v("com.greensock"),y=1e-10,l=function(t){var e,i=[],s=t.length;for(e=0;e!==s;i.push(t[e++]));return i},T=function(){},x=(n=Object.prototype.toString,a=n.call([]),function(t){return null!=t&&(t instanceof Array||"object"==typeof t&&!!t.push&&n.call(t)===a)}),w={},b=function(o,l,h,_){this.sc=w[o]?w[o].sc:[],(w[o]=this).gsClass=null,this.func=h;var u=[];this.check=function(t){for(var e,i,s,r,n=l.length,a=n;-1<--n;)(e=w[l[n]]||new b(l[n],[])).gsClass?(u[n]=e.gsClass,a--):t&&e.sc.push(this);if(0===a&&h){if(s=(i=("com.greensock."+o).split(".")).pop(),r=v(i.join("."))[s]=this.gsClass=h.apply(h,u),_)if(m[s]=p[s]=r,"undefined"!=typeof module&&module.exports)if(o===f)for(n in module.exports=p[f]=r,p)r[n]=p[n];else p[f]&&(p[f][s]=r);else"function"==typeof define&&define.amd&&define((c.GreenSockAMDPath?c.GreenSockAMDPath+"/":"")+o.split(".").pop(),[],function(){return r});for(n=0;n<this.sc.length;n++)this.sc[n].check()}},this.check(!0)},o=c._gsDefine=function(t,e,i,s){return new b(t,e,i,s)},P=u._class=function(t,e,i){return e=e||function(){},o(t,[],function(){return e},i),e};o.globals=m;var h=[0,0,1,1],S=P("easing.Ease",function(t,e,i,s){this._func=t,this._type=i||0,this._power=s||0,this._params=e?h.concat(e):h},!0),k=S.map={},_=S.register=function(t,e,i,s){for(var r,n,a,o,l=e.split(","),h=l.length,_=(i||"easeIn,easeOut,easeInOut").split(",");-1<--h;)for(n=l[h],r=s?P("easing."+n,null,!0):u.easing[n]||{},a=_.length;-1<--a;)o=_[a],k[n+"."+o]=k[o+n]=r[o]=t.getRatio?t:t[o]||new t};for((r=S.prototype)._calcEnd=!1,r.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,s=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?s*=s:2===i?s*=s*s:3===i?s*=s*s*s:4===i&&(s*=s*s*s*s),1===e?1-s:2===e?s:t<.5?s/2:1-s/2},i=(e=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;-1<--i;)r=e[i]+",Power"+i,_(new S(null,null,1,i),r,"easeOut",!0),_(new S(null,null,2,i),r,"easeIn"+(0===i?",easeNone":"")),_(new S(null,null,3,i),r,"easeInOut");k.linear=u.easing.Linear.easeIn,k.swing=u.easing.Quad.easeInOut;var O=P("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});(r=O.prototype).addEventListener=function(t,e,i,s,r){r=r||0;var n,a,o=this._listeners[t],l=0;for(this!==d||g||d.wake(),null==o&&(this._listeners[t]=o=[]),a=o.length;-1<--a;)(n=o[a]).c===e&&n.s===i?o.splice(a,1):0===l&&n.pr<r&&(l=a+1);o.splice(l,0,{c:e,s:i,up:s,pr:r})},r.removeEventListener=function(t,e){var i,s=this._listeners[t];if(s)for(i=s.length;-1<--i;)if(s[i].c===e)return void s.splice(i,1)},r.dispatchEvent=function(t){var e,i,s,r=this._listeners[t];if(r)for(1<(e=r.length)&&(r=r.slice(0)),i=this._eventTarget;-1<--e;)(s=r[e])&&(s.up?s.c.call(s.s||i,{type:t,target:i}):s.c.call(s.s||i))};var R=c.requestAnimationFrame,A=c.cancelAnimationFrame,C=Date.now||function(){return(new Date).getTime()},M=C();for(i=(e=["ms","moz","webkit","o"]).length;-1<--i&&!R;)R=c[e[i]+"RequestAnimationFrame"],A=c[e[i]+"CancelAnimationFrame"]||c[e[i]+"CancelRequestAnimationFrame"];P("Ticker",function(t,e){var r,n,a,o,l,h=this,_=C(),i=!(!1===e||!R)&&"auto",u=500,c=33,f=function(t){var e,i,s=C()-M;u<s&&(_+=s-c),M+=s,h.time=(M-_)/1e3,e=h.time-l,(!r||0<e||!0===t)&&(h.frame++,l+=e+(o<=e?.004:o-e),i=!0),!0!==t&&(a=n(f)),i&&h.dispatchEvent("tick")};O.call(h),h.time=h.frame=0,h.tick=function(){f(!0)},h.lagSmoothing=function(t,e){if(!arguments.length)return u<1e10;u=t||1e10,c=Math.min(e,u,0)},h.sleep=function(){null!=a&&(i&&A?A(a):clearTimeout(a),n=T,a=null,h===d&&(g=!1))},h.wake=function(t){null!==a?h.sleep():t?_+=-M+(M=C()):10<h.frame&&(M=C()-u+5),n=0===r?T:i&&R?R:function(t){return setTimeout(t,1e3*(l-h.time)+1|0)},h===d&&(g=!0),f(2)},h.fps=function(t){if(!arguments.length)return r;o=1/((r=t)||60),l=this.time+o,h.wake()},h.useRAF=function(t){if(!arguments.length)return i;h.sleep(),i=t,h.fps(r)},h.fps(t),setTimeout(function(){"auto"===i&&h.frame<5&&"hidden"!==(s||{}).visibilityState&&h.useRAF(!1)},1500)}),(r=u.Ticker.prototype=new u.events.EventDispatcher).constructor=u.Ticker;var D=P("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=!0===e.immediateRender,this.data=e.data,this._reversed=!0===e.reversed,$){g||d.wake();var i=this.vars.useFrames?H:$;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});d=D.ticker=new u.Ticker,(r=D.prototype)._dirty=r._gc=r._initted=r._paused=!1,r._totalTime=r._time=0,r._rawPrevTime=-1,r._next=r._last=r._onUpdate=r._timeline=r.timeline=null,r._paused=!1;var E=function(){g&&2e3<C()-M&&("hidden"!==(s||{}).visibilityState||!d.lagSmoothing())&&d.wake();var t=setTimeout(E,2e3);t.unref&&t.unref()};E(),r.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},r.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},r.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},r.seek=function(t,e){return this.totalTime(Number(t),!1!==e)},r.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,!1!==e,!0)},r.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},r.render=function(t,e,i){},r.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},r.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<i+this.totalDuration()/this._timeScale-1e-7},r._enabled=function(t,e){return g||d.wake(),this._gc=!t,this._active=this.isActive(),!0!==e&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},r._kill=function(t,e){return this._enabled(!1,!1)},r.kill=function(t,e){return this._kill(t,e),this},r._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},r._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();-1<--e;)"{self}"===t[e]&&(i[e]=this);return i},r._callback=function(t){var e=this.vars,i=e[t],s=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this;switch(s?s.length:0){case 0:i.call(r);break;case 1:i.call(r,s[0]);break;case 2:i.call(r,s[0],s[1]);break;default:i.apply(r,s)}},r.eventCallback=function(t,e,i,s){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=x(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,r[t+"Scope"]=s),"onUpdate"===t&&(this._onUpdate=e)}return this},r.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},r.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&0<this._time&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},r.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},r.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},r.totalTime=function(t,e,i){if(g||d.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var s=this._totalDuration,r=this._timeline;if(s<t&&!i&&(t=s),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?s-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(L.length&&J(),this.render(t,e,!1),L.length&&J())}return this},r.progress=r.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},r.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},r.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},r.timeScale=function(t){if(!arguments.length)return this._timeScale;var e,i;for(t=t||y,this._timeline&&this._timeline.smoothChildTiming&&(i=(e=this._pauseTime)||0===e?e:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/t),this._timeScale=t,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},r.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},r.paused=function(t){if(!arguments.length)return this._paused;var e,i,s=this._timeline;return t!=this._paused&&s&&(g||t||d.wake(),i=(e=s.rawTime())-this._pauseTime,!t&&s.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=s.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var F=P("core.SimpleTimeline",function(t){D.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});(r=F.prototype=new D).constructor=F,r.kill()._gc=!1,r._first=r._last=r._recent=null,r._sortChildren=!1,r.add=r.insert=function(t,e,i,s){var r,n;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=this.rawTime()-(t._timeline.rawTime()-t._pauseTime)),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(n=t._startTime;r&&r._startTime>n;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},r._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},r.render=function(t,e,i){var s,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)s=r._next,(r._active||t>=r._startTime&&!r._paused&&!r._gc)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=s},r.rawTime=function(){return g||d.wake(),this._totalTime};var I=P("TweenLite",function(t,e,i){if(D.call(this,e,i),this.render=I.prototype.render,null==t)throw"Cannot tween a null target.";this.target=t="string"!=typeof t?t:I.selector(t)||t;var s,r,n,a=t.jquery||t.length&&t!==c&&t[0]&&(t[0]===c||t[0].nodeType&&t[0].style&&!t.nodeType),o=this.vars.overwrite;if(this._overwrite=o=null==o?Z[I.defaultOverwrite]:"number"==typeof o?o>>0:Z[o],(a||t instanceof Array||t.push&&x(t))&&"number"!=typeof t[0])for(this._targets=n=l(t),this._propLookup=[],this._siblings=[],s=0;s<n.length;s++)(r=n[s])?"string"!=typeof r?r.length&&r!==c&&r[0]&&(r[0]===c||r[0].nodeType&&r[0].style&&!r.nodeType)?(n.splice(s--,1),this._targets=n=n.concat(l(r))):(this._siblings[s]=tt(r,this,!1),1===o&&1<this._siblings[s].length&&it(r,this,null,1,this._siblings[s])):"string"==typeof(r=n[s--]=I.selector(r))&&n.splice(s+1,1):n.splice(s--,1);else this._propLookup={},this._siblings=tt(t,this,!1),1===o&&1<this._siblings.length&&it(t,this,null,1,this._siblings);(this.vars.immediateRender||0===e&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-y,this.render(Math.min(0,-this._delay)))},!0),z=function(t){return t&&t.length&&t!==c&&t[0]&&(t[0]===c||t[0].nodeType&&t[0].style&&!t.nodeType)};(r=I.prototype=new D).constructor=I,r.kill()._gc=!1,r.ratio=0,r._firstPT=r._targets=r._overwrittenProps=r._startAt=null,r._notifyPluginsOfEnabled=r._lazy=!1,I.version="2.0.2",I.defaultEase=r._ease=new S(null,null,1,1),I.defaultOverwrite="auto",I.ticker=d,I.autoSleep=120,I.lagSmoothing=function(t,e){d.lagSmoothing(t,e)},I.selector=c.$||c.jQuery||function(t){var e=c.$||c.jQuery;return e?(I.selector=e)(t):(s||(s=c.document),s?s.querySelectorAll?s.querySelectorAll(t):s.getElementById("#"===t.charAt(0)?t.substr(1):t):t)};var L=[],N={},X=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,B=/[\+-]=-?[\.\d]/,j=function(t){for(var e,i=this._firstPT;i;)e=i.blob?1===t&&null!=this.end?this.end:t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m.call(this._tween,e,this._target||i.t,this._tween):e<1e-6&&-1e-6<e&&!i.blob&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},U=function(t,e,i,s){var r,n,a,o,l,h,_,u=[],c=0,f="",p=0;for(u.start=t,u.end=e,t=u[0]=t+"",e=u[1]=e+"",i&&(i(u),t=u[0],e=u[1]),u.length=0,r=t.match(X)||[],n=e.match(X)||[],s&&(s._next=null,s.blob=1,u._firstPT=u._applyPT=s),l=n.length,o=0;o<l;o++)_=n[o],f+=(h=e.substr(c,e.indexOf(_,c)-c))||!o?h:",",c+=h.length,p?p=(p+1)%5:"rgba("===h.substr(-5)&&(p=1),_===r[o]||r.length<=o?f+=_:(f&&(u.push(f),f=""),a=parseFloat(r[o]),u.push(a),u._firstPT={_next:u._firstPT,t:u,p:u.length-1,s:a,c:("="===_.charAt(1)?parseInt(_.charAt(0)+"1",10)*parseFloat(_.substr(2)):parseFloat(_)-a)||0,f:0,m:p&&p<4?Math.round:0}),c+=_.length;return(f+=e.substr(c))&&u.push(f),u.setRatio=j,B.test(e)&&(u.end=null),u},Y=function(t,e,i,s,r,n,a,o,l){"function"==typeof s&&(s=s(l||0,t));var h=typeof t[e],_="function"!==h?"":e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),u="get"!==i?i:_?a?t[_](a):t[_]():t[e],c="string"==typeof s&&"="===s.charAt(1),f={t:t,p:e,s:u,f:"function"===h,pg:0,n:r||e,m:n?"function"==typeof n?n:Math.round:0,pr:0,c:c?parseInt(s.charAt(0)+"1",10)*parseFloat(s.substr(2)):parseFloat(s)-u||0};if(("number"!=typeof u||"number"!=typeof s&&!c)&&(a||isNaN(u)||!c&&isNaN(s)||"boolean"==typeof u||"boolean"==typeof s?(f.fp=a,f={t:U(u,c?parseFloat(f.s)+f.c+(f.s+"").replace(/[0-9\-\.]/g,""):s,o||I.defaultStringFilter,f),p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):(f.s=parseFloat(u),c||(f.c=parseFloat(s)-f.s||0))),f.c)return(f._next=this._firstPT)&&(f._next._prev=f),this._firstPT=f},q=I._internals={isArray:x,isSelector:z,lazyTweens:L,blobDif:U},V=I._plugins={},G=q.tweenLookup={},W=0,Q=q.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1},Z={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},H=D._rootFramesTimeline=new F,$=D._rootTimeline=new F,K=30,J=q.lazyRender=function(){var t,e=L.length;for(N={};-1<--e;)(t=L[e])&&!1!==t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);L.length=0};$._startTime=d.time,H._startTime=d.frame,$._active=H._active=!0,setTimeout(J,1),D._updateRoot=I.render=function(){var t,e,i;if(L.length&&J(),$.render((d.time-$._startTime)*$._timeScale,!1,!1),H.render((d.frame-H._startTime)*H._timeScale,!1,!1),L.length&&J(),d.frame>=K){for(i in K=d.frame+(parseInt(I.autoSleep,10)||120),G){for(t=(e=G[i].tweens).length;-1<--t;)e[t]._gc&&e.splice(t,1);0===e.length&&delete G[i]}if((!(i=$._first)||i._paused)&&I.autoSleep&&!H._first&&1===d._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||d.sleep()}}},d.addEventListener("tick",D._updateRoot);var tt=function(t,e,i){var s,r,n=t._gsTweenID;if(G[n||(t._gsTweenID=n="t"+W++)]||(G[n]={target:t,tweens:[]}),e&&((s=G[n].tweens)[r=s.length]=e,i))for(;-1<--r;)s[r]===e&&s.splice(r,1);return G[n].tweens},et=function(t,e,i,s){var r,n,a=t.vars.onOverwrite;return a&&(r=a(t,e,i,s)),(a=I.onOverwrite)&&(n=a(t,e,i,s)),!1!==r&&!1!==n},it=function(t,e,i,s,r){var n,a,o,l;if(1===s||4<=s){for(l=r.length,n=0;n<l;n++)if((o=r[n])!==e)o._gc||o._kill(null,t,e)&&(a=!0);else if(5===s)break;return a}var h,_=e._startTime+y,u=[],c=0,f=0===e._duration;for(n=r.length;-1<--n;)(o=r[n])===e||o._gc||o._paused||(o._timeline!==e._timeline?(h=h||st(e,0,f),0===st(o,h,f)&&(u[c++]=o)):o._startTime<=_&&o._startTime+o.totalDuration()/o._timeScale>_&&((f||!o._initted)&&_-o._startTime<=2e-10||(u[c++]=o)));for(n=c;-1<--n;)if(l=(o=u[n])._firstPT,2===s&&o._kill(i,t,e)&&(a=!0),2!==s||!o._firstPT&&o._initted&&l){if(2!==s&&!et(o,e))continue;o._enabled(!1,!1)&&(a=!0)}return a},st=function(t,e,i){for(var s=t._timeline,r=s._timeScale,n=t._startTime;s._timeline;){if(n+=s._startTime,r*=s._timeScale,s._paused)return-100;s=s._timeline}return e<(n/=r)?n-e:i&&n===e||!t._initted&&n-e<2*y?y:(n+=t.totalDuration()/t._timeScale/r)>e+y?0:n-e-y};r._init=function(){var t,e,i,s,r,n,a=this.vars,o=this._overwrittenProps,l=this._duration,h=!!a.immediateRender,_=a.ease;if(a.startAt){for(s in this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={},a.startAt)r[s]=a.startAt[s];if(r.data="isStart",r.overwrite=!1,r.immediateRender=!0,r.lazy=h&&!1!==a.lazy,r.startAt=r.delay=null,r.onUpdate=a.onUpdate,r.onUpdateParams=a.onUpdateParams,r.onUpdateScope=a.onUpdateScope||a.callbackScope||this,this._startAt=I.to(this.target||{},0,r),h)if(0<this._time)this._startAt=null;else if(0!==l)return}else if(a.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{for(s in 0!==this._time&&(h=!1),i={},a)Q[s]&&"autoCSS"!==s||(i[s]=a[s]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&!1!==a.lazy,i.immediateRender=h,this._startAt=I.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=_=_?_ instanceof S?_:"function"==typeof _?new S(_,a.easeParams):k[_]||I.defaultEase:I.defaultEase,a.easeParams instanceof Array&&_.config&&(this._ease=_.config.apply(_,a.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(n=this._targets.length,t=0;t<n;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],o?o[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,o,0);if(e&&I._onPluginEvent("_onInitAllProps",this),o&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),a.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=a.onUpdate,this._initted=!0},r._initProps=function(t,e,i,s,r){var n,a,o,l,h,_;if(null==t)return!1;for(n in N[t._gsTweenID]&&J(),this.vars.css||t.style&&t!==c&&t.nodeType&&V.css&&!1!==this.vars.autoCSS&&function(t,e){var i,s={};for(i in t)Q[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!V[i]||V[i]&&V[i]._autoCSS)||(s[i]=t[i],delete t[i]);t.css=s}(this.vars,t),this.vars)if(_=this.vars[n],Q[n])_&&(_ instanceof Array||_.push&&x(_))&&-1!==_.join("").indexOf("{self}")&&(this.vars[n]=_=this._swapSelfInParams(_,this));else if(V[n]&&(l=new V[n])._onInitTween(t,this.vars[n],this,r)){for(this._firstPT=h={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:1,n:n,pg:1,pr:l._priority,m:0},a=l._overwriteProps.length;-1<--a;)e[l._overwriteProps[a]]=this._firstPT;(l._priority||l._onInitAllProps)&&(o=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0),h._next&&(h._next._prev=h)}else e[n]=Y.call(this,t,n,"get",_,n,0,null,this.vars.stringFilter,r);return s&&this._kill(s,t)?this._initProps(t,e,i,s,r):1<this._overwrite&&this._firstPT&&1<i.length&&it(t,this,e,this._overwrite,i)?(this._kill(e,t),this._initProps(t,e,i,s,r)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(N[t._gsTweenID]=!0),o)},r.render=function(t,e,i){var s,r,n,a,o=this._time,l=this._duration,h=this._rawPrevTime;if(l-1e-7<=t&&0<=t)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(s=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&-1e-7<=t||h===y&&"isPause"!==this.data)&&h!==t&&(i=!0,y<h&&(r="onReverseComplete")),this._rawPrevTime=a=!e||t||h===t?t:y);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==o||0===l&&0<h)&&(r="onReverseComplete",s=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(0<=h&&(h!==y||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=a=!e||t||h===t?t:y)),(!this._initted||this._startAt&&this._startAt.progress())&&(i=!0);else if(this._totalTime=this._time=t,this._easeType){var _=t/l,u=this._easeType,c=this._easePower;(1===u||3===u&&.5<=_)&&(_=1-_),3===u&&(_*=2),1===c?_*=_:2===c?_*=_*_:3===c?_*=_*_*_:4===c&&(_*=_*_*_*_),this.ratio=1===u?1-_:2===u?_:t/l<.5?_/2:1-_/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==o||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=o,this._rawPrevTime=h,L.push(this),void(this._lazy=[t,e]);this._time&&!s?this.ratio=this._ease.getRatio(this._time/l):s&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==o&&0<=t&&(this._active=!0),0===o&&(this._startAt&&(0<=t?this._startAt.render(t,!0,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),n=this._firstPT;n;)n.f?n.t[n.p](n.c*this.ratio+n.s):n.t[n.p]=n.c*this.ratio+n.s,n=n._next;this._onUpdate&&(t<0&&this._startAt&&-1e-4!==t&&this._startAt.render(t,!0,i),e||(this._time!==o||s||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&-1e-4!==t&&this._startAt.render(t,!0,i),s&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===y&&a!==y&&(this._rawPrevTime=0)))}},r._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:I.selector(e)||e;var s,r,n,a,o,l,h,_,u,c=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline,f=this._firstPT;if((x(e)||z(e))&&"number"!=typeof e[0])for(s=e.length;-1<--s;)this._kill(t,e[s],i)&&(l=!0);else{if(this._targets){for(s=this._targets.length;-1<--s;)if(e===this._targets[s]){o=this._propLookup[s]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[s]=t?this._overwrittenProps[s]||{}:"all";break}}else{if(e!==this.target)return!1;o=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(o){if(h=t||o,_=t!==r&&"all"!==r&&t!==o&&("object"!=typeof t||!t._tempKill),i&&(I.onOverwrite||this.vars.onOverwrite)){for(n in h)o[n]&&(u||(u=[]),u.push(n));if((u||!t)&&!et(this,i,e,u))return!1}for(n in h)(a=o[n])&&(c&&(a.f?a.t[a.p](a.s):a.t[a.p]=a.s,l=!0),a.pg&&a.t._kill(h)&&(l=!0),a.pg&&0!==a.t._overwriteProps.length||(a._prev?a._prev._next=a._next:a===this._firstPT&&(this._firstPT=a._next),a._next&&(a._next._prev=a._prev),a._next=a._prev=null),delete o[n]),_&&(r[n]=1);!this._firstPT&&this._initted&&f&&this._enabled(!1,!1)}}return l},r.invalidate=function(){return this._notifyPluginsOfEnabled&&I._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],D.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-y,this.render(Math.min(0,-this._delay))),this},r._enabled=function(t,e){if(g||d.wake(),t&&this._gc){var i,s=this._targets;if(s)for(i=s.length;-1<--i;)this._siblings[i]=tt(s[i],this,!0);else this._siblings=tt(this.target,this,!0)}return D.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&I._onPluginEvent(t?"_onEnable":"_onDisable",this)},I.to=function(t,e,i){return new I(t,e,i)},I.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new I(t,e,i)},I.fromTo=function(t,e,i,s){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,new I(t,e,s)},I.delayedCall=function(t,e,i,s,r){return new I(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:s,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},I.set=function(t,e){return new I(t,0,e)},I.getTweensOf=function(t,e){if(null==t)return[];var i,s,r,n;if(t="string"!=typeof t?t:I.selector(t)||t,(x(t)||z(t))&&"number"!=typeof t[0]){for(i=t.length,s=[];-1<--i;)s=s.concat(I.getTweensOf(t[i],e));for(i=s.length;-1<--i;)for(n=s[i],r=i;-1<--r;)n===s[r]&&s.splice(i,1)}else if(t._gsTweenID)for(i=(s=tt(t).concat()).length;-1<--i;)(s[i]._gc||e&&!s[i].isActive())&&s.splice(i,1);return s||[]},I.killTweensOf=I.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var s=I.getTweensOf(t,e),r=s.length;-1<--r;)s[r]._kill(i,t)};var rt=P("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=rt.prototype},!0);if(r=rt.prototype,rt.version="1.19.0",rt.API=2,r._firstPT=null,r._addTween=Y,r.setRatio=j,r._kill=function(t){var e,i=this._overwriteProps,s=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;-1<--e;)null!=t[i[e]]&&i.splice(e,1);for(;s;)null!=t[s.n]&&(s._next&&(s._next._prev=s._prev),s._prev?(s._prev._next=s._next,s._prev=null):this._firstPT===s&&(this._firstPT=s._next)),s=s._next;return!1},r._mod=r._roundProps=function(t){for(var e,i=this._firstPT;i;)(e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},I._onPluginEvent=function(t,e){var i,s,r,n,a,o=e._firstPT;if("_onInitAllProps"===t){for(;o;){for(a=o._next,s=r;s&&s.pr>o.pr;)s=s._next;(o._prev=s?s._prev:n)?o._prev._next=o:r=o,(o._next=s)?s._prev=o:n=o,o=a}o=e._firstPT=r}for(;o;)o.pg&&"function"==typeof o.t[t]&&o.t[t]()&&(i=!0),o=o._next;return i},rt.activate=function(t){for(var e=t.length;-1<--e;)t[e].API===rt.API&&(V[(new t[e])._propName]=t[e]);return!0},o.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,s=t.priority||0,r=t.overwriteProps,n={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},a=P("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){rt.call(this,i,s),this._overwriteProps=r||[]},!0===t.global),o=a.prototype=new rt(i);for(e in(o.constructor=a).API=t.API,n)"function"==typeof t[e]&&(o[n[e]]=t[e]);return a.version=t.version,rt.activate([a]),a},e=c._gsQueue){for(i=0;i<e.length;i++)e[i]();for(r in w)w[r].func||c.console.log("GSAP encountered missing dependency: "+r)}g=!1}("undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window,"TweenLite"),((_gsScope="undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window)._gsQueue||(_gsScope._gsQueue=[])).push(function(){"use strict";var b,x,w,P,g,i,v,S,y,T,f,p,d,t,e,l,h,s;_gsScope._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(s,_,v){var d=function(t){var e,i=[],s=t.length;for(e=0;e!==s;i.push(t[e++]));return i},g=function(t,e,i){var s,r,n=t.cycle;for(s in n)r=n[s],t[s]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},y=function(t,e,i){v.call(this,t,e,i),this._cycle=0,this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._repeat&&this._uncache(!0),this.render=y.prototype.render},T=1e-10,x=v._internals,w=x.isSelector,b=x.isArray,t=y.prototype=v.to({},.1,{}),P=[];y.version="2.0.2",t.constructor=y,t.kill()._gc=!1,y.killTweensOf=y.killDelayedCallsTo=v.killTweensOf,y.getTweensOf=v.getTweensOf,y.lagSmoothing=v.lagSmoothing,y.ticker=v.ticker,y.render=v.render,t.invalidate=function(){return this._yoyo=!0===this.vars.yoyo||!!this.vars.yoyoEase,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._yoyoEase=null,this._uncache(!0),v.prototype.invalidate.call(this)},t.updateTo=function(t,e){var i,s=this.ratio,r=this.vars.immediateRender||t.immediateRender;for(i in e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay)),t)this.vars[i]=t[i];if(this._initted||r)if(e)this._initted=!1,r&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&v._onPluginEvent("_onDisable",this),.998<this._time/this._duration){var n=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(n,!0,!1)}else if(this._initted=!1,this._init(),0<this._time||r)for(var a,o=1/(1-s),l=this._firstPT;l;)a=l.s+l.c,l.c*=o,l.s=a-l.c,l=l._next;return this},t.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var s,r,n,a,o,l,h,_,u,c=this._dirty?this.totalDuration():this._totalDuration,f=this._time,p=this._totalTime,m=this._cycle,d=this._duration,g=this._rawPrevTime;if(c-1e-7<=t&&0<=t?(this._totalTime=c,this._cycle=this._repeat,this._yoyo&&0!=(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=d,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(s=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===d&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(g<0||t<=0&&-1e-7<=t||g===T&&"isPause"!==this.data)&&g!==t&&(i=!0,T<g&&(r="onReverseComplete")),this._rawPrevTime=_=!e||t||g===t?t:T)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==p||0===d&&0<g)&&(r="onReverseComplete",s=this._reversed),t<0&&(this._active=!1,0===d&&(this._initted||!this.vars.lazy||i)&&(0<=g&&(i=!0),this._rawPrevTime=_=!e||t||g===t?t:T)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(a=d+this._repeatDelay,this._cycle=this._totalTime/a>>0,0!==this._cycle&&this._cycle===this._totalTime/a&&p<=t&&this._cycle--,this._time=this._totalTime-this._cycle*a,this._yoyo&&0!=(1&this._cycle)&&(this._time=d-this._time,(u=this._yoyoEase||this.vars.yoyoEase)&&(this._yoyoEase||(!0!==u||this._initted?this._yoyoEase=u=!0===u?this._ease:u instanceof Ease?u:Ease.map[u]:(u=this.vars.ease,this._yoyoEase=u=u?u instanceof Ease?u:"function"==typeof u?new Ease(u,this.vars.easeParams):Ease.map[u]||v.defaultEase:v.defaultEase)),this.ratio=u?1-u.getRatio((d-this._time)/d):0)),this._time>d?this._time=d:this._time<0&&(this._time=0)),this._easeType&&!u?(o=this._time/d,(1===(l=this._easeType)||3===l&&.5<=o)&&(o=1-o),3===l&&(o*=2),1===(h=this._easePower)?o*=o:2===h?o*=o*o:3===h?o*=o*o*o:4===h&&(o*=o*o*o*o),1===l?this.ratio=1-o:2===l?this.ratio=o:this._time/d<.5?this.ratio=o/2:this.ratio=1-o/2):u||(this.ratio=this._ease.getRatio(this._time/d))),f!==this._time||i||m!==this._cycle){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=f,this._totalTime=p,this._rawPrevTime=g,this._cycle=m,x.lazyTweens.push(this),void(this._lazy=[t,e]);!this._time||s||u?s&&this._ease._calcEnd&&!u&&(this.ratio=this._ease.getRatio(0===this._time?0:1)):this.ratio=this._ease.getRatio(this._time/d)}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==f&&0<=t&&(this._active=!0),0===p&&(2===this._initted&&0<t&&this._init(),this._startAt&&(0<=t?this._startAt.render(t,!0,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==d||e||this._callback("onStart"))),n=this._firstPT;n;)n.f?n.t[n.p](n.c*this.ratio+n.s):n.t[n.p]=n.c*this.ratio+n.s,n=n._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,!0,i),e||(this._totalTime!==p||r)&&this._callback("onUpdate")),this._cycle!==m&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,!0,i),s&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===d&&this._rawPrevTime===T&&_!==T&&(this._rawPrevTime=0)))}else p!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},y.to=function(t,e,i){return new y(t,e,i)},y.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new y(t,e,i)},y.fromTo=function(t,e,i,s){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,new y(t,e,s)},y.staggerTo=y.allTo=function(t,e,i,s,r,n,a){s=s||0;var o,l,h,_,u=0,c=[],f=function(){i.onComplete&&i.onComplete.apply(i.onCompleteScope||this,arguments),r.apply(a||i.callbackScope||this,n||P)},p=i.cycle,m=i.startAt&&i.startAt.cycle;for(b(t)||("string"==typeof t&&(t=v.selector(t)||t),w(t)&&(t=d(t))),t=t||[],s<0&&((t=d(t)).reverse(),s*=-1),o=t.length-1,h=0;h<=o;h++){for(_ in l={},i)l[_]=i[_];if(p&&(g(l,t,h),null!=l.duration&&(e=l.duration,delete l.duration)),m){for(_ in m=l.startAt={},i.startAt)m[_]=i.startAt[_];g(l.startAt,t,h)}l.delay=u+(l.delay||0),h===o&&r&&(l.onComplete=f),c[h]=new y(t[h],e,l),u+=s}return c},y.staggerFrom=y.allFrom=function(t,e,i,s,r,n,a){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,y.staggerTo(t,e,i,s,r,n,a)},y.staggerFromTo=y.allFromTo=function(t,e,i,s,r,n,a,o){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,y.staggerTo(t,e,s,r,n,a,o)},y.delayedCall=function(t,e,i,s,r){return new y(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:s,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:r,overwrite:0})},y.set=function(t,e){return new y(t,0,e)},y.isTweening=function(t){return 0<v.getTweensOf(t,!0).length};var n=function(t,e){for(var i=[],s=0,r=t._first;r;)r instanceof v?i[s++]=r:(e&&(i[s++]=r),s=(i=i.concat(n(r,e))).length),r=r._next;return i},u=y.getAllTweens=function(t){return n(s._rootTimeline,t).concat(n(s._rootFramesTimeline,t))};y.killAll=function(t,e,i,s){null==e&&(e=!0),null==i&&(i=!0);var r,n,a,o=u(0!=s),l=o.length,h=e&&i&&s;for(a=0;a<l;a++)n=o[a],(h||n instanceof _||(r=n.target===n.vars.onComplete)&&i||e&&!r)&&(t?n.totalTime(n._reversed?0:n.totalDuration()):n._enabled(!1,!1))},y.killChildTweensOf=function(t,e){if(null!=t){var i,s,r,n,a,o=x.tweenLookup;if("string"==typeof t&&(t=v.selector(t)||t),w(t)&&(t=d(t)),b(t))for(n=t.length;-1<--n;)y.killChildTweensOf(t[n],e);else{for(r in i=[],o)for(s=o[r].target.parentNode;s;)s===t&&(i=i.concat(o[r].tweens)),s=s.parentNode;for(a=i.length,n=0;n<a;n++)e&&i[n].totalTime(i[n].totalDuration()),i[n]._enabled(!1,!1)}}};var r=function(t,e,i,s){e=!1!==e,i=!1!==i;for(var r,n,a=u(s=!1!==s),o=e&&i&&s,l=a.length;-1<--l;)n=a[l],(o||n instanceof _||(r=n.target===n.vars.onComplete)&&i||e&&!r)&&n.paused(t)};return y.pauseAll=function(t,e,i){r(!0,t,e,i)},y.resumeAll=function(t,e,i){r(!1,t,e,i)},y.globalTimeScale=function(t){var e=s._rootTimeline,i=v.ticker.time;return arguments.length?(t=t||T,e._startTime=i-(i-e._startTime)*e._timeScale/t,e=s._rootFramesTimeline,i=v.ticker.frame,e._startTime=i-(i-e._startTime)*e._timeScale/t,e._timeScale=s._rootTimeline._timeScale=t,t):e._timeScale},t.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},t.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},t.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},t.duration=function(t){return arguments.length?s.prototype.duration.call(this,t):this._duration},t.totalDuration=function(t){return arguments.length?-1===this._repeat?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},t.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},t.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},t.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},y},!0),_gsScope._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(_,u,c){var f=function(t){u.call(this,t),this._labels={},this.autoRemoveChildren=!0===this.vars.autoRemoveChildren,this.smoothChildTiming=!0===this.vars.smoothChildTiming,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var e,i,s=this.vars;for(i in s)e=s[i],d(e)&&-1!==e.join("").indexOf("{self}")&&(s[i]=this._swapSelfInParams(e));d(s.tweens)&&this.add(s.tweens,0,s.align,s.stagger)},m=1e-10,t=c._internals,e=f._internals={},p=t.isSelector,d=t.isArray,g=t.lazyTweens,v=t.lazyRender,a=_gsScope._gsDefine.globals,y=function(t){var e,i={};for(e in t)i[e]=t[e];return i},T=function(t,e,i){var s,r,n=t.cycle;for(s in n)r=n[s],t[s]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},n=e.pauseCallback=function(){},x=function(t){var e,i=[],s=t.length;for(e=0;e!==s;i.push(t[e++]));return i},i=f.prototype=new u;return f.version="2.0.2",i.constructor=f,i.kill()._gc=i._forcingPlayhead=i._hasPause=!1,i.to=function(t,e,i,s){var r=i.repeat&&a.TweenMax||c;return e?this.add(new r(t,e,i),s):this.set(t,i,s)},i.from=function(t,e,i,s){return this.add((i.repeat&&a.TweenMax||c).from(t,e,i),s)},i.fromTo=function(t,e,i,s,r){var n=s.repeat&&a.TweenMax||c;return e?this.add(n.fromTo(t,e,i,s),r):this.set(t,s,r)},i.staggerTo=function(t,e,i,s,r,n,a,o){var l,h,_=new f({onComplete:n,onCompleteParams:a,callbackScope:o,smoothChildTiming:this.smoothChildTiming}),u=i.cycle;for("string"==typeof t&&(t=c.selector(t)||t),p(t=t||[])&&(t=x(t)),(s=s||0)<0&&((t=x(t)).reverse(),s*=-1),h=0;h<t.length;h++)(l=y(i)).startAt&&(l.startAt=y(l.startAt),l.startAt.cycle&&T(l.startAt,t,h)),u&&(T(l,t,h),null!=l.duration&&(e=l.duration,delete l.duration)),_.to(t[h],e,l,h*s);return this.add(_,r)},i.staggerFrom=function(t,e,i,s,r,n,a,o){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,s,r,n,a,o)},i.staggerFromTo=function(t,e,i,s,r,n,a,o,l){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,s,r,n,a,o,l)},i.call=function(t,e,i,s){return this.add(c.delayedCall(0,t,e,i),s)},i.set=function(t,e,i){return i=this._parseTimeOrLabel(i,0,!0),null==e.immediateRender&&(e.immediateRender=i===this._time&&!this._paused),this.add(new c(t,0,e),i)},f.exportRoot=function(t,e){null==(t=t||{}).smoothChildTiming&&(t.smoothChildTiming=!0);var i,s,r,n,a=new f(t),o=a._timeline;for(null==e&&(e=!0),o._remove(a,!0),a._startTime=0,a._rawPrevTime=a._time=a._totalTime=o._time,r=o._first;r;)n=r._next,e&&r instanceof c&&r.target===r.vars.onComplete||((s=r._startTime-r._delay)<0&&(i=1),a.add(r,s)),r=n;return o.add(a,0),i&&a.totalDuration(),a},i.add=function(t,e,i,s){var r,n,a,o,l,h;if("number"!=typeof e&&(e=this._parseTimeOrLabel(e,0,!0,t)),!(t instanceof _)){if(t instanceof Array||t&&t.push&&d(t)){for(i=i||"normal",s=s||0,r=e,n=t.length,a=0;a<n;a++)d(o=t[a])&&(o=new f({tweens:o})),this.add(o,r),"string"!=typeof o&&"function"!=typeof o&&("sequence"===i?r=o._startTime+o.totalDuration()/o._timeScale:"start"===i&&(o._startTime-=o.delay())),r+=s;return this._uncache(!0)}if("string"==typeof t)return this.addLabel(t,e);if("function"!=typeof t)throw"Cannot add "+t+" into the timeline; it is not a tween, timeline, function, or string.";t=c.delayedCall(0,t)}if(u.prototype.add.call(this,t,e),t._time&&(r=Math.max(0,Math.min(t.totalDuration(),(this.rawTime()-t._startTime)*t._timeScale)),1e-5<Math.abs(r-t._totalTime)&&t.render(r,!1,!1)),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(h=(l=this).rawTime()>t._startTime;l._timeline;)h&&l._timeline.smoothChildTiming?l.totalTime(l._totalTime,!0):l._gc&&l._enabled(!0,!1),l=l._timeline;return this},i.remove=function(t){if(t instanceof _){this._remove(t,!1);var e=t._timeline=t.vars.useFrames?_._rootFramesTimeline:_._rootTimeline;return t._startTime=(t._paused?t._pauseTime:e._time)-(t._reversed?t.totalDuration()-t._totalTime:t._totalTime)/t._timeScale,this}if(t instanceof Array||t&&t.push&&d(t)){for(var i=t.length;-1<--i;)this.remove(t[i]);return this}return"string"==typeof t?this.removeLabel(t):this.kill(null,t)},i._remove=function(t,e){return u.prototype._remove.call(this,t,e),this._last?this._time>this.duration()&&(this._time=this._duration,this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},i.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},i.insert=i.insertMultiple=function(t,e,i,s){return this.add(t,e||0,i,s)},i.appendMultiple=function(t,e,i,s){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,s)},i.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},i.addPause=function(t,e,i,s){var r=c.delayedCall(0,n,i,s||this);return r.vars.onComplete=r.vars.onReverseComplete=e,r.data="isPause",this._hasPause=!0,this.add(r,t)},i.removeLabel=function(t){return delete this._labels[t],this},i.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},i._parseTimeOrLabel=function(t,e,i,s){var r,n;if(s instanceof _&&s.timeline===this)this.remove(s);else if(s&&(s instanceof Array||s.push&&d(s)))for(n=s.length;-1<--n;)s[n]instanceof _&&s[n].timeline===this&&this.remove(s[n]);if(r="number"!=typeof t||e?99999999999<this.duration()?this.recent().endTime(!1):this._duration:0,"string"==typeof e)return this._parseTimeOrLabel(e,i&&"number"==typeof t&&null==this._labels[e]?t-r:0,i);if(e=e||0,"string"!=typeof t||!isNaN(t)&&null==this._labels[t])null==t&&(t=r);else{if(-1===(n=t.indexOf("=")))return null==this._labels[t]?i?this._labels[t]=r+e:e:this._labels[t]+e;e=parseInt(t.charAt(n-1)+"1",10)*Number(t.substr(n+1)),t=1<n?this._parseTimeOrLabel(t.substr(0,n-1),0,i):r}return Number(t)+e},i.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),!1!==e)},i.stop=function(){return this.paused(!0)},i.gotoAndPlay=function(t,e){return this.play(t,e)},i.gotoAndStop=function(t,e){return this.pause(t,e)},i.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var s,r,n,a,o,l,h,_=this._time,u=this._dirty?this.totalDuration():this._totalDuration,c=this._startTime,f=this._timeScale,p=this._paused;if(_!==this._time&&(t+=this._time-_),u-1e-7<=t&&0<=t)this._totalTime=this._time=u,this._reversed||this._hasPausedChild()||(r=!0,a="onComplete",o=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&-1e-7<=t||this._rawPrevTime<0||this._rawPrevTime===m)&&this._rawPrevTime!==t&&this._first&&(o=!0,this._rawPrevTime>m&&(a="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:m,t=u+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==_||0===this._duration&&this._rawPrevTime!==m&&(0<this._rawPrevTime||t<0&&0<=this._rawPrevTime))&&(a="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(o=r=!0,a="onReverseComplete"):0<=this._rawPrevTime&&this._first&&(o=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:m,0===t&&r)for(s=this._first;s&&0===s._startTime;)s._duration||(r=!1),s=s._next;t=0,this._initted||(o=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(_<=t)for(s=this._first;s&&s._startTime<=t&&!l;)s._duration||"isPause"!==s.data||s.ratio||0===s._startTime&&0===this._rawPrevTime||(l=s),s=s._next;else for(s=this._last;s&&s._startTime>=t&&!l;)s._duration||"isPause"===s.data&&0<s._rawPrevTime&&(l=s),s=s._prev;l&&(this._time=t=l._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==_&&this._first||i||o||l){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==_&&0<t&&(this._active=!0),0===_&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),_<=(h=this._time))for(s=this._first;s&&(n=s._next,h===this._time&&(!this._paused||p));)(s._active||s._startTime<=h&&!s._paused&&!s._gc)&&(l===s&&this.pause(),s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)),s=n;else for(s=this._last;s&&(n=s._prev,h===this._time&&(!this._paused||p));){if(s._active||s._startTime<=_&&!s._paused&&!s._gc){if(l===s){for(l=s._prev;l&&l.endTime()>this._time;)l.render(l._reversed?l.totalDuration()-(t-l._startTime)*l._timeScale:(t-l._startTime)*l._timeScale,e,i),l=l._prev;l=null,this.pause()}s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)}s=n}this._onUpdate&&(e||(g.length&&v(),this._callback("onUpdate"))),a&&(this._gc||c!==this._startTime&&f===this._timeScale||(0===this._time||u>=this.totalDuration())&&(r&&(g.length&&v(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this._callback(a)))}},i._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof f&&t._hasPausedChild())return!0;t=t._next}return!1},i.getChildren=function(t,e,i,s){s=s||-9999999999;for(var r=[],n=this._first,a=0;n;)n._startTime<s||(n instanceof c?!1!==e&&(r[a++]=n):(!1!==i&&(r[a++]=n),!1!==t&&(a=(r=r.concat(n.getChildren(!0,e,i))).length))),n=n._next;return r},i.getTweensOf=function(t,e){var i,s,r=this._gc,n=[],a=0;for(r&&this._enabled(!0,!0),s=(i=c.getTweensOf(t)).length;-1<--s;)(i[s].timeline===this||e&&this._contains(i[s]))&&(n[a++]=i[s]);return r&&this._enabled(!1,!0),n},i.recent=function(){return this._recent},i._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},i.shiftChildren=function(t,e,i){i=i||0;for(var s,r=this._first,n=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(s in n)n[s]>=i&&(n[s]+=t);return this._uncache(!0)},i._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),s=i.length,r=!1;-1<--s;)i[s]._kill(t,e)&&(r=!0);return r},i.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;-1<--i;)e[i]._enabled(!1,!1);return!1!==t&&(this._labels={}),this._uncache(!0)},i.invalidate=function(){for(var t=this._first;t;)t.invalidate(),t=t._next;return _.prototype.invalidate.call(this)},i._enabled=function(t,e){if(t===this._gc)for(var i=this._first;i;)i._enabled(t,!0),i=i._next;return u.prototype._enabled.call(this,t,e)},i.totalTime=function(t,e,i){this._forcingPlayhead=!0;var s=_.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,s},i.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},i.totalDuration=function(t){if(arguments.length)return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this;if(this._dirty){for(var e,i,s=0,r=this._last,n=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>n&&this._sortChildren&&!r._paused&&!this._calculatingDuration?(this._calculatingDuration=1,this.add(r,r._startTime-r._delay),this._calculatingDuration=0):n=r._startTime,r._startTime<0&&!r._paused&&(s-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale,this._time-=r._startTime,this._totalTime-=r._startTime,this._rawPrevTime-=r._startTime),this.shiftChildren(-r._startTime,!1,-9999999999),n=0),s<(i=r._startTime+r._totalDuration/r._timeScale)&&(s=i),r=e;this._duration=this._totalDuration=s,this._dirty=!1}return this._totalDuration},i.paused=function(t){if(!t)for(var e=this._first,i=this._time;e;)e._startTime===i&&"isPause"===e.data&&(e._rawPrevTime=0),e=e._next;return _.prototype.paused.apply(this,arguments)},i.usesFrames=function(){for(var t=this._timeline;t._timeline;)t=t._timeline;return t===_._rootFramesTimeline},i.rawTime=function(t){return t&&(this._paused||this._repeat&&0<this.time()&&this.totalProgress()<1)?this._totalTime%(this._duration+this._repeatDelay):this._paused?this._totalTime:(this._timeline.rawTime(t)-this._startTime)*this._timeScale},f},!0),_gsScope._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(e,o,t){var i=function(t){e.call(this,t),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=!0===this.vars.yoyo,this._dirty=!0},k=1e-10,s=o._internals,O=s.lazyTweens,R=s.lazyRender,l=_gsScope._gsDefine.globals,h=new t(null,null,1,0),r=i.prototype=new e;return r.constructor=i,r.kill()._gc=!1,i.version="2.0.2",r.invalidate=function(){return this._yoyo=!0===this.vars.yoyo,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),e.prototype.invalidate.call(this)},r.addCallback=function(t,e,i,s){return this.add(o.delayedCall(0,t,i,s),e)},r.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),s=i.length,r=this._parseTimeOrLabel(e);-1<--s;)i[s]._startTime===r&&i[s]._enabled(!1,!1);return this},r.removePause=function(t){return this.removeCallback(e._internals.pauseCallback,t)},r.tweenTo=function(t,e){e=e||{};var i,s,r,n={ease:h,useFrames:this.usesFrames(),immediateRender:!1,lazy:!1},a=e.repeat&&l.TweenMax||o;for(s in e)n[s]=e[s];return n.time=this._parseTimeOrLabel(t),i=Math.abs(Number(n.time)-this._time)/this._timeScale||.001,r=new a(this,i,n),n.onStart=function(){r.target.paused(!0),r.vars.time===r.target.time()||i!==r.duration()||r.isFromTo||r.duration(Math.abs(r.vars.time-r.target.time())/r.target._timeScale).render(r.time(),!0,!0),e.onStart&&e.onStart.apply(e.onStartScope||e.callbackScope||r,e.onStartParams||[])},r},r.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=!1!==i.immediateRender;var s=this.tweenTo(e,i);return s.isFromTo=1,s.duration(Math.abs(s.vars.time-t)/this._timeScale||.001)},r.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var s,r,n,a,o,l,h,_,u=this._time,c=this._dirty?this.totalDuration():this._totalDuration,f=this._duration,p=this._totalTime,m=this._startTime,d=this._timeScale,g=this._rawPrevTime,v=this._paused,y=this._cycle;if(u!==this._time&&(t+=this._time-u),c-1e-7<=t&&0<=t)this._locked||(this._totalTime=c,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(r=!0,a="onComplete",o=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&-1e-7<=t||g<0||g===k)&&g!==t&&this._first&&(o=!0,k<g&&(a="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:k,this._yoyo&&0!=(1&this._cycle)?this._time=t=0:t=(this._time=f)+1e-4;else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),((this._time=0)!==u||0===f&&g!==k&&(0<g||t<0&&0<=g)&&!this._locked)&&(a="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(o=r=!0,a="onReverseComplete"):0<=g&&this._first&&(o=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=f||!e||t||this._rawPrevTime===t?t:k,0===t&&r)for(s=this._first;s&&0===s._startTime;)s._duration||(r=!1),s=s._next;t=0,this._initted||(o=!0)}else if(0===f&&g<0&&(o=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(l=f+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&p<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!=(1&this._cycle)&&(this._time=f-this._time),this._time>f?t=(this._time=f)+1e-4:this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if(u<=(t=this._time)||this._repeat&&y!==this._cycle)for(s=this._first;s&&s._startTime<=t&&!h;)s._duration||"isPause"!==s.data||s.ratio||0===s._startTime&&0===this._rawPrevTime||(h=s),s=s._next;else for(s=this._last;s&&s._startTime>=t&&!h;)s._duration||"isPause"===s.data&&0<s._rawPrevTime&&(h=s),s=s._prev;h&&h._startTime<f&&(this._time=t=h._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==y&&!this._locked){var T=this._yoyo&&0!=(1&y),x=T===(this._yoyo&&0!=(1&this._cycle)),w=this._totalTime,b=this._cycle,P=this._rawPrevTime,S=this._time;if(this._totalTime=y*f,this._cycle<y?T=!T:this._totalTime+=f,this._time=u,this._rawPrevTime=0===f?g-1e-4:g,this._cycle=y,this._locked=!0,u=T?0:f,this.render(u,e,0===f),e||this._gc||this.vars.onRepeat&&(this._cycle=b,this._locked=!1,this._callback("onRepeat")),u!==this._time)return;if(x&&(this._cycle=y,this._locked=!0,u=T?f+1e-4:-1e-4,this.render(u,!0,!1)),this._locked=!1,this._paused&&!v)return;this._time=S,this._totalTime=w,this._cycle=b,this._rawPrevTime=P}if(this._time!==u&&this._first||i||o||h){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==p&&0<t&&(this._active=!0),0===p&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),u<=(_=this._time))for(s=this._first;s&&(n=s._next,_===this._time&&(!this._paused||v));)(s._active||s._startTime<=this._time&&!s._paused&&!s._gc)&&(h===s&&this.pause(),s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)),s=n;else for(s=this._last;s&&(n=s._prev,_===this._time&&(!this._paused||v));){if(s._active||s._startTime<=u&&!s._paused&&!s._gc){if(h===s){for(h=s._prev;h&&h.endTime()>this._time;)h.render(h._reversed?h.totalDuration()-(t-h._startTime)*h._timeScale:(t-h._startTime)*h._timeScale,e,i),h=h._prev;h=null,this.pause()}s._reversed?s.render((s._dirty?s.totalDuration():s._totalDuration)-(t-s._startTime)*s._timeScale,e,i):s.render((t-s._startTime)*s._timeScale,e,i)}s=n}this._onUpdate&&(e||(O.length&&R(),this._callback("onUpdate"))),a&&(this._locked||this._gc||m!==this._startTime&&d===this._timeScale||(0===this._time||c>=this.totalDuration())&&(r&&(O.length&&R(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this._callback(a)))}else p!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate"))},r.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var s,r,n=[],a=this.getChildren(t,e,i),o=0,l=a.length;for(s=0;s<l;s++)(r=a[s]).isActive()&&(n[o++]=r);return n},r.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),s=i.length;for(e=0;e<s;e++)if(i[e].time>t)return i[e].name;return null},r.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;-1<--i;)if(e[i].time<t)return e[i].name;return null},r.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},r.invalidate=function(){return this._locked=!1,e.prototype.invalidate.call(this)},r.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!=(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()||0},r.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()||0},r.totalDuration=function(t){return arguments.length?-1!==this._repeat&&t?this.timeScale(this.totalDuration()/t):this:(this._dirty&&(e.prototype.totalDuration.call(this),this._totalDuration=-1===this._repeat?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},r.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!=(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},r.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},r.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},r.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},r.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},i},!0),b=180/Math.PI,x=[],w=[],P=[],g={},i=_gsScope._gsDefine.globals,v=function(t,e,i,s){i===s&&(i=s-(s-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=s,this.da=s-t,this.ca=i-t,this.ba=e-t},S=function(t,e,i,s){var r={a:t},n={},a={},o={c:s},l=(t+e)/2,h=(e+i)/2,_=(i+s)/2,u=(l+h)/2,c=(h+_)/2,f=(c-u)/8;return r.b=l+(t-l)/4,n.b=u+f,r.c=n.a=(r.b+n.b)/2,n.c=a.a=(u+c)/2,a.b=c-f,o.b=_+(s-_)/4,a.c=o.a=(a.b+o.b)/2,[r,n,a,o]},y=function(t,e,i,s,r){var n,a,o,l,h,_,u,c,f,p,m,d,g,v=t.length-1,y=0,T=t[0].a;for(n=0;n<v;n++)a=(h=t[y]).a,o=h.d,l=t[y+1].d,c=r?(m=x[n],g=((d=w[n])+m)*e*.25/(s?.5:P[n]||.5),o-((_=o-(o-a)*(s?.5*e:0!==m?g/m:0))+(((u=o+(l-o)*(s?.5*e:0!==d?g/d:0))-_)*(3*m/(m+d)+.5)/4||0))):o-((_=o-(o-a)*e*.5)+(u=o+(l-o)*e*.5))/2,_+=c,u+=c,h.c=f=_,h.b=0!==n?T:T=h.a+.6*(h.c-h.a),h.da=o-a,h.ca=f-a,h.ba=T-a,i?(p=S(a,T,f,o),t.splice(y,1,p[0],p[1],p[2],p[3]),y+=4):y++,T=u;(h=t[y]).b=T,h.c=T+.4*(h.d-T),h.da=h.d-h.a,h.ca=h.c-h.a,h.ba=T-h.a,i&&(p=S(h.a,T,h.c,h.d),t.splice(y,1,p[0],p[1],p[2],p[3]))},T=function(t,e,i,s){var r,n,a,o,l,h,_=[];if(s)for(n=(t=[s].concat(t)).length;-1<--n;)"string"==typeof(h=t[n][e])&&"="===h.charAt(1)&&(t[n][e]=s[e]+Number(h.charAt(0)+h.substr(2)));if((r=t.length-2)<0)return _[0]=new v(t[0][e],0,0,t[0][e]),_;for(n=0;n<r;n++)a=t[n][e],o=t[n+1][e],_[n]=new v(a,0,0,o),i&&(l=t[n+2][e],x[n]=(x[n]||0)+(o-a)*(o-a),w[n]=(w[n]||0)+(l-o)*(l-o));return _[n]=new v(t[n][e],0,0,t[n+1][e]),_},f=function(t,e,i,s,r,n){var a,o,l,h,_,u,c,f,p={},m=[],d=n||t[0];for(o in r="string"==typeof r?","+r+",":",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",null==e&&(e=1),t[0])m.push(o);if(1<t.length){for(f=t[t.length-1],c=!0,a=m.length;-1<--a;)if(o=m[a],.05<Math.abs(d[o]-f[o])){c=!1;break}c&&(t=t.concat(),n&&t.unshift(n),t.push(t[1]),n=t[t.length-3])}for(x.length=w.length=P.length=0,a=m.length;-1<--a;)o=m[a],g[o]=-1!==r.indexOf(","+o+","),p[o]=T(t,o,g[o],n);for(a=x.length;-1<--a;)x[a]=Math.sqrt(x[a]),w[a]=Math.sqrt(w[a]);if(!s){for(a=m.length;-1<--a;)if(g[o])for(u=(l=p[m[a]]).length-1,h=0;h<u;h++)_=l[h+1].da/w[h]+l[h].da/x[h]||0,P[h]=(P[h]||0)+_*_;for(a=P.length;-1<--a;)P[a]=Math.sqrt(P[a])}for(a=m.length,h=i?4:1;-1<--a;)l=p[o=m[a]],y(l,e,i,s,g[o]),c&&(l.splice(0,h),l.splice(l.length-h,h));return p},p=function(t,e,i){for(var s,r,n,a,o,l,h,_,u,c,f,p=1/i,m=t.length;-1<--m;)for(n=(c=t[m]).a,a=c.d-n,o=c.c-n,l=c.b-n,s=r=0,_=1;_<=i;_++)s=r-(r=((h=p*_)*h*a+3*(u=1-h)*(h*o+u*l))*h),e[f=m*i+_-1]=(e[f]||0)+s*s},d=_gsScope._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.8",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var s,r,n,a,o,l=e.values||[],h={},_=l[0],u=e.autoRotate||i.vars.orientToBezier;for(s in this._autoRotate=u?u instanceof Array?u:[["x","y","rotation",!0===u?0:Number(u)||0]]:null,_)this._props.push(s);for(n=this._props.length;-1<--n;)s=this._props[n],this._overwriteProps.push(s),r=this._func[s]="function"==typeof t[s],h[s]=r?t[s.indexOf("set")||"function"!=typeof t["get"+s.substr(3)]?s:"get"+s.substr(3)]():parseFloat(t[s]),o||h[s]!==l[0][s]&&(o=h);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?f(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,o):function(t,e,i){var s,r,n,a,o,l,h,_,u,c,f,p={},m="cubic"===(e=e||"soft")?3:2,d="soft"===e,g=[];if(d&&i&&(t=[i].concat(t)),null==t||t.length<m+1)throw"invalid Bezier data";for(u in t[0])g.push(u);for(l=g.length;-1<--l;){for(p[u=g[l]]=o=[],c=0,_=t.length,h=0;h<_;h++)s=null==i?t[h][u]:"string"==typeof(f=t[h][u])&&"="===f.charAt(1)?i[u]+Number(f.charAt(0)+f.substr(2)):Number(f),d&&1<h&&h<_-1&&(o[c++]=(s+o[c-2])/2),o[c++]=s;for(_=c-m+1,h=c=0;h<_;h+=m)s=o[h],r=o[h+1],n=o[h+2],a=2===m?0:o[h+3],o[c++]=f=3===m?new v(s,r,n,a):new v(s,(2*r+s)/3,(2*r+n)/3,n);o.length=c}return p}(l,e.type,h),this._segCount=this._beziers[s].length,this._timeRes){var c=function(t,e){var i,s,r,n,a=[],o=[],l=0,h=0,_=(e=e>>0||6)-1,u=[],c=[];for(i in t)p(t[i],a,e);for(r=a.length,s=0;s<r;s++)l+=Math.sqrt(a[s]),c[n=s%e]=l,n===_&&(h+=l,u[n=s/e>>0]=c,o[n]=h,l=0,c=[]);return{length:h,lengths:o,segments:u}}(this._beziers,this._timeRes);this._length=c.length,this._lengths=c.lengths,this._segments=c.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(u=this._autoRotate)for(this._initialRotations=[],u[0]instanceof Array||(this._autoRotate=u=[u]),n=u.length;-1<--n;){for(a=0;a<3;a++)s=u[n][a],this._func[s]="function"==typeof t[s]&&t[s.indexOf("set")||"function"!=typeof t["get"+s.substr(3)]?s:"get"+s.substr(3)];s=u[n][2],this._initialRotations[n]=(this._func[s]?this._func[s].call(this._target):this._target[s])||0,this._overwriteProps.push(s)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(t){var e,i,s,r,n,a,o,l,h,_,u=this._segCount,c=this._func,f=this._target,p=t!==this._startRatio;if(this._timeRes){if(h=this._lengths,_=this._curSeg,t*=this._length,s=this._li,t>this._l2&&s<u-1){for(l=u-1;s<l&&(this._l2=h[++s])<=t;);this._l1=h[s-1],this._li=s,this._curSeg=_=this._segments[s],this._s2=_[this._s1=this._si=0]}else if(t<this._l1&&0<s){for(;0<s&&(this._l1=h[--s])>=t;);0===s&&t<this._l1?this._l1=0:s++,this._l2=h[s],this._li=s,this._curSeg=_=this._segments[s],this._s1=_[(this._si=_.length-1)-1]||0,this._s2=_[this._si]}if(e=s,t-=this._l1,s=this._si,t>this._s2&&s<_.length-1){for(l=_.length-1;s<l&&(this._s2=_[++s])<=t;);this._s1=_[s-1],this._si=s}else if(t<this._s1&&0<s){for(;0<s&&(this._s1=_[--s])>=t;);0===s&&t<this._s1?this._s1=0:s++,this._s2=_[s],this._si=s}a=(s+(t-this._s1)/(this._s2-this._s1))*this._prec||0}else a=(t-(e=t<0?0:1<=t?u-1:u*t>>0)*(1/u))*u;for(i=1-a,s=this._props.length;-1<--s;)r=this._props[s],o=(a*a*(n=this._beziers[r][e]).da+3*i*(a*n.ca+i*n.ba))*a+n.a,this._mod[r]&&(o=this._mod[r](o,f)),c[r]?f[r](o):f[r]=o;if(this._autoRotate){var m,d,g,v,y,T,x,w=this._autoRotate;for(s=w.length;-1<--s;)r=w[s][2],T=w[s][3]||0,x=!0===w[s][4]?1:b,n=this._beziers[w[s][0]],m=this._beziers[w[s][1]],n&&m&&(n=n[e],m=m[e],d=n.a+(n.b-n.a)*a,d+=((v=n.b+(n.c-n.b)*a)-d)*a,v+=(n.c+(n.d-n.c)*a-v)*a,g=m.a+(m.b-m.a)*a,g+=((y=m.b+(m.c-m.b)*a)-g)*a,y+=(m.c+(m.d-m.c)*a-y)*a,o=p?Math.atan2(y-g,v-d)*x+T:this._initialRotations[s],this._mod[r]&&(o=this._mod[r](o,f)),c[r]?f[r](o):f[r]=o)}}}),t=d.prototype,d.bezierThrough=f,d.cubicToQuadratic=S,d._autoCSS=!0,d.quadraticToCubic=function(t,e,i){return new v(t,(2*e+t)/3,(2*e+i)/3,i)},d._cssRegister=function(){var t=i.CSSPlugin;if(t){var e=t._internals,f=e._parseToProxy,p=e._setPluginRatio,m=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,i,s,r,n){e instanceof Array&&(e={values:e}),n=new d;var a,o,l,h=e.values,_=h.length-1,u=[],c={};if(_<0)return r;for(a=0;a<=_;a++)l=f(t,h[a],s,r,n,_!==a),u[a]=l.end;for(o in e)c[o]=e[o];return c.values=u,(r=new m(t,"bezier",0,0,l.pt,2)).data=l,r.plugin=n,r.setRatio=p,0===c.autoRotate&&(c.autoRotate=!0),!c.autoRotate||c.autoRotate instanceof Array||(a=!0===c.autoRotate?0:Number(c.autoRotate),c.autoRotate=null!=l.end.left?[["left","top","rotation",a,!1]]:null!=l.end.x&&[["x","y","rotation",a,!1]]),c.autoRotate&&(s._transform||s._enableTransforms(!1),l.autoRotate=s._target._gsTransform,l.proxy.rotation=l.autoRotate.rotation||0,s._overwriteProps.push("rotation")),n._onInitTween(l.proxy,c,s._tween),r}})}},t._mod=function(t){for(var e,i=this._overwriteProps,s=i.length;-1<--s;)(e=t[i[s]])&&"function"==typeof e&&(this._mod[i[s]]=e)},t._kill=function(t){var e,i,s=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=s.length;-1<--i;)s[i]===e&&s.splice(i,1);if(s=this._autoRotate)for(i=s.length;-1<--i;)t[s[i][2]]&&s.splice(i,1);return this._super._kill.call(this,t)},_gsScope._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(n,B){var p,P,k,m,j=function(){n.call(this,"css"),this._overwriteProps.length=0,this.setRatio=j.prototype.setRatio},h=_gsScope._gsDefine.globals,d={},t=j.prototype=new n("css");(t.constructor=j).version="2.0.2",j.API=2,j.defaultTransformPerspective=0,j.defaultSkewType="compensated",j.defaultSmoothOrigin=!0,t="px",j.suffixMap={top:t,right:t,bottom:t,left:t,width:t,height:t,fontSize:t,padding:t,margin:t,perspective:t,lineHeight:""};var O,g,v,U,y,S,R,A,e,i,C=/(?:\-|\.|\b)(\d|\.|e\-)+/g,M=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,T=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,_=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,D=/(?:\d|\-|\+|=|#|\.)*/g,E=/opacity *= *([^)]*)/i,x=/opacity:([^;]*)/i,a=/alpha\(opacity *=.+?\)/i,w=/^(rgb|hsl)/,o=/([A-Z])/g,l=/-([a-z])/gi,b=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,u=function(t,e){return e.toUpperCase()},f=/(?:Left|Right|Width)/i,c=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,F=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,I=/,(?=[^\)]*(?:\(|$))/gi,z=/[\s,\(]/i,Y=Math.PI/180,q=180/Math.PI,L={},s={style:{}},N=_gsScope.document||{createElement:function(){return s}},X=function(t,e){return N.createElementNS?N.createElementNS(e||"http://www.w3.org/1999/xhtml",t):N.createElement(t)},V=X("div"),G=X("img"),r=j._internals={_specialProps:d},W=(_gsScope.navigator||{}).userAgent||"",Q=(e=W.indexOf("Android"),i=X("a"),v=-1!==W.indexOf("Safari")&&-1===W.indexOf("Chrome")&&(-1===e||3<parseFloat(W.substr(e+8,2))),y=v&&parseFloat(W.substr(W.indexOf("Version/")+8,2))<6,U=-1!==W.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(W)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(W))&&(S=parseFloat(RegExp.$1)),!!i&&(i.style.cssText="top:1px;opacity:.55;",/^0.55/.test(i.style.opacity))),Z=function(t){return E.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},H=function(t){_gsScope.console&&console.log(t)},$="",K="",J=function(t,e){var i,s,r=(e=e||V).style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],s=5;-1<--s&&void 0===r[i[s]+t];);return 0<=s?($="-"+(K=3===s?"ms":i[s]).toLowerCase()+"-",K+t):null},tt=("undefined"!=typeof window?window:N.defaultView||{getComputedStyle:function(){}}).getComputedStyle,et=j.getStyle=function(t,e,i,s,r){var n;return Q||"opacity"!==e?(!s&&t.style[e]?n=t.style[e]:(i=i||tt(t))?n=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(o,"-$1").toLowerCase()):t.currentStyle&&(n=t.currentStyle[e]),null==r||n&&"none"!==n&&"auto"!==n&&"auto auto"!==n?n:r):Z(t)},it=r.convertToPixels=function(t,e,i,s,r){if("px"===s||!s&&"lineHeight"!==e)return i;if("auto"===s||!i)return 0;var n,a,o,l=f.test(e),h=t,_=V.style,u=i<0,c=1===i;if(u&&(i=-i),c&&(i*=100),"lineHeight"!==e||s)if("%"===s&&-1!==e.indexOf("border"))n=i/100*(l?t.clientWidth:t.clientHeight);else{if(_.cssText="border:0 solid red;position:"+et(t,"position")+";line-height:0;","%"!==s&&h.appendChild&&"v"!==s.charAt(0)&&"rem"!==s)_[l?"borderLeftWidth":"borderTopWidth"]=i+s;else{if(h=t.parentNode||N.body,-1!==et(h,"display").indexOf("flex")&&(_.position="absolute"),a=h._gsCache,o=B.ticker.frame,a&&l&&a.time===o)return a.width*i/100;_[l?"width":"height"]=i+s}h.appendChild(V),n=parseFloat(V[l?"offsetWidth":"offsetHeight"]),h.removeChild(V),l&&"%"===s&&!1!==j.cacheWidths&&((a=h._gsCache=h._gsCache||{}).time=o,a.width=n/i*100),0!==n||r||(n=it(t,e,i,s,!0))}else a=tt(t).lineHeight,t.style.lineHeight=i,n=parseFloat(tt(t).lineHeight),t.style.lineHeight=a;return c&&(n/=100),u?-n:n},st=r.calculateOffset=function(t,e,i){if("absolute"!==et(t,"position",i))return 0;var s="left"===e?"Left":"Top",r=et(t,"margin"+s,i);return t["offset"+s]-(it(t,e,parseFloat(r),r.replace(D,""))||0)},rt=function(t,e){var i,s,r,n={};if(e=e||tt(t,null))if(i=e.length)for(;-1<--i;)-1!==(r=e[i]).indexOf("-transform")&&It!==r||(n[r.replace(l,u)]=e.getPropertyValue(r));else for(i in e)-1!==i.indexOf("Transform")&&Ft!==i||(n[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===n[i]&&(n[i.replace(l,u)]=e[i]);return Q||(n.opacity=Z(t)),s=Qt(t,e,!1),n.rotation=s.rotation,n.skewX=s.skewX,n.scaleX=s.scaleX,n.scaleY=s.scaleY,n.x=s.x,n.y=s.y,Lt&&(n.z=s.z,n.rotationX=s.rotationX,n.rotationY=s.rotationY,n.scaleZ=s.scaleZ),n.filters&&delete n.filters,n},nt=function(t,e,i,s,r){var n,a,o,l={},h=t.style;for(a in i)"cssText"!==a&&"length"!==a&&isNaN(a)&&(e[a]!==(n=i[a])||r&&r[a])&&-1===a.indexOf("Origin")&&("number"!=typeof n&&"string"!=typeof n||(l[a]="auto"!==n||"left"!==a&&"top"!==a?""!==n&&"auto"!==n&&"none"!==n||"string"!=typeof e[a]||""===e[a].replace(_,"")?n:0:st(t,a),void 0!==h[a]&&(o=new Tt(h,a,h[a],o))));if(s)for(a in s)"className"!==a&&(l[a]=s[a]);return{difs:l,firstMPT:o}},at={width:["Left","Right"],height:["Top","Bottom"]},ot=["marginLeft","marginRight","marginTop","marginBottom"],lt=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||tt(t))[e]||0;if(t.getCTM&&Vt(t))return t.getBBox()[e]||0;var s=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=at[e],n=r.length;for(i=i||tt(t,null);-1<--n;)s-=parseFloat(et(t,"padding"+r[n],i,!0))||0,s-=parseFloat(et(t,"border"+r[n]+"Width",i,!0))||0;return s},ht=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,s=t.split(" "),r=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":s[0],n=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":s[1];if(3<s.length&&!e){for(s=t.split(", ").join(",").split(","),t=[],i=0;i<s.length;i++)t.push(ht(s[i]));return t.join(",")}return null==n?n="center"===r?"50%":"0":"center"===n&&(n="50%"),("center"===r||isNaN(parseFloat(r))&&-1===(r+"").indexOf("="))&&(r="50%"),t=r+" "+n+(2<s.length?" "+s[2]:""),e&&(e.oxp=-1!==r.indexOf("%"),e.oyp=-1!==n.indexOf("%"),e.oxr="="===r.charAt(1),e.oyr="="===n.charAt(1),e.ox=parseFloat(r.replace(_,"")),e.oy=parseFloat(n.replace(_,"")),e.v=t),e||t},_t=function(t,e){return"function"==typeof t&&(t=t(A,R)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ut=function(t,e){"function"==typeof t&&(t=t(A,R));var i="string"==typeof t&&"="===t.charAt(1);return"string"==typeof t&&"v"===t.charAt(t.length-2)&&(t=(i?t.substr(0,2):0)+window["inner"+("vh"===t.substr(-2)?"Height":"Width")]*(parseFloat(i?t.substr(2):t)/100)),null==t?e:i?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ct=function(t,e,i,s){var r,n,a,o,l;return"function"==typeof t&&(t=t(A,R)),(o=null==t?e:"number"==typeof t?t:(r=360,n=t.split("_"),a=((l="="===t.charAt(1))?parseInt(t.charAt(0)+"1",10)*parseFloat(n[0].substr(2)):parseFloat(n[0]))*(-1===t.indexOf("rad")?1:q)-(l?0:e),n.length&&(s&&(s[i]=e+a),-1!==t.indexOf("short")&&(a%=r)!==a%180&&(a=a<0?a+r:a-r),-1!==t.indexOf("_cw")&&a<0?a=(a+3599999999640)%r-(a/r|0)*r:-1!==t.indexOf("ccw")&&0<a&&(a=(a-3599999999640)%r-(a/r|0)*r)),e+a))<1e-6&&-1e-6<o&&(o=0),o},ft={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},pt=function(t,e,i){return 255*(6*(t=t<0?t+1:1<t?t-1:t)<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},mt=j.parseColor=function(t,e){var i,s,r,n,a,o,l,h,_,u,c;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ft[t])i=ft[t];else if("#"===t.charAt(0))4===t.length&&(t="#"+(s=t.charAt(1))+s+(r=t.charAt(2))+r+(n=t.charAt(3))+n),i=[(t=parseInt(t.substr(1),16))>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=c=t.match(C),e){if(-1!==t.indexOf("="))return t.match(M)}else a=Number(i[0])%360/360,o=Number(i[1])/100,s=2*(l=Number(i[2])/100)-(r=l<=.5?l*(o+1):l+o-l*o),3<i.length&&(i[3]=Number(i[3])),i[0]=pt(a+1/3,s,r),i[1]=pt(a,s,r),i[2]=pt(a-1/3,s,r);else i=t.match(C)||ft.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),3<i.length&&(i[3]=Number(i[3]))}else i=ft.black;return e&&!c&&(s=i[0]/255,r=i[1]/255,n=i[2]/255,l=((h=Math.max(s,r,n))+(_=Math.min(s,r,n)))/2,h===_?a=o=0:(u=h-_,o=.5<l?u/(2-h-_):u/(h+_),a=h===s?(r-n)/u+(r<n?6:0):h===r?(n-s)/u+2:(s-r)/u+4,a*=60),i[0]=a+.5|0,i[1]=100*o+.5|0,i[2]=100*l+.5|0),i},dt=function(t,e){var i,s,r,n=t.match(gt)||[],a=0,o="";if(!n.length)return t;for(i=0;i<n.length;i++)s=n[i],a+=(r=t.substr(a,t.indexOf(s,a)-a)).length+s.length,3===(s=mt(s,e)).length&&s.push(1),o+=r+(e?"hsla("+s[0]+","+s[1]+"%,"+s[2]+"%,"+s[3]:"rgba("+s.join(","))+")";return o+t.substr(a)},gt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(t in ft)gt+="|"+t+"\\b";gt=new RegExp(gt+")","gi"),j.colorStringFilter=function(t){var e,i=t[0]+" "+t[1];gt.test(i)&&(e=-1!==i.indexOf("hsl(")||-1!==i.indexOf("hsla("),t[0]=dt(t[0],e),t[1]=dt(t[1],e)),gt.lastIndex=0},B.defaultStringFilter||(B.defaultStringFilter=j.colorStringFilter);var vt=function(t,e,n,a){if(null==t)return function(t){return t};var o,l=e?(t.match(gt)||[""])[0]:"",h=t.split(l).join("").match(T)||[],_=t.substr(0,t.indexOf(h[0])),u=")"===t.charAt(t.length-1)?")":"",c=-1!==t.indexOf(" ")?" ":",",f=h.length,p=0<f?h[0].replace(C,""):"";return f?o=e?function(t){var e,i,s,r;if("number"==typeof t)t+=p;else if(a&&I.test(t)){for(r=t.replace(I,"|").split("|"),s=0;s<r.length;s++)r[s]=o(r[s]);return r.join(",")}if(e=(t.match(gt)||[l])[0],s=(i=t.split(e).join("").match(T)||[]).length,f>s--)for(;++s<f;)i[s]=n?i[(s-1)/2|0]:h[s];return _+i.join(c)+c+e+u+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,i,s;if("number"==typeof t)t+=p;else if(a&&I.test(t)){for(i=t.replace(I,"|").split("|"),s=0;s<i.length;s++)i[s]=o(i[s]);return i.join(",")}if(s=(e=t.match(T)||[]).length,f>s--)for(;++s<f;)e[s]=n?e[(s-1)/2|0]:h[s];return _+e.join(c)+u}:function(t){return t}},yt=function(h){return h=h.split(","),function(t,e,i,s,r,n,a){var o,l=(e+"").split(" ");for(a={},o=0;o<4;o++)a[h[o]]=l[o]=l[o]||l[(o-1)/2>>0];return s.parse(t,a,r,n)}},Tt=(r._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,s,r,n,a=this.data,o=a.proxy,l=a.firstMPT;l;)e=o[l.v],l.r?e=l.r(e):e<1e-6&&-1e-6<e&&(e=0),l.t[l.p]=e,l=l._next;if(a.autoRotate&&(a.autoRotate.rotation=a.mod?a.mod.call(this._tween,o.rotation,this.t,this._tween):o.rotation),1===t||0===t)for(l=a.firstMPT,n=1===t?"e":"b";l;){if((i=l.t).type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,s=1;s<i.l;s++)r+=i["xn"+s]+i["xs"+(s+1)];i[n]=r}}else i[n]=i.s+i.xs0;l=l._next}},function(t,e,i,s,r){this.t=t,this.p=e,this.v=i,this.r=r,s&&((s._prev=this)._next=s)}),xt=(r._parseToProxy=function(t,e,i,s,r,n){var a,o,l,h,_,u=s,c={},f={},p=i._transform,m=L;for(i._transform=null,L=e,s=_=i.parse(t,e,s,r),L=m,n&&(i._transform=p,u&&(u._prev=null,u._prev&&(u._prev._next=null)));s&&s!==u;){if(s.type<=1&&(f[o=s.p]=s.s+s.c,c[o]=s.s,n||(h=new Tt(s,"s",o,h,s.r),s.c=0),1===s.type))for(a=s.l;0<--a;)l="xn"+a,f[o=s.p+"_"+l]=s.data[l],c[o]=s[l],n||(h=new Tt(s,l,o,h,s.rxp[l]));s=s._next}return{proxy:c,end:f,firstMPT:h,pt:_}},r.CSSPropTween=function(t,e,i,s,r,n,a,o,l,h,_){this.t=t,this.p=e,this.s=i,this.c=s,this.n=a||e,t instanceof xt||m.push(this.n),this.r=o?"function"==typeof o?o:Math.round:o,this.type=n||0,l&&(this.pr=l,p=!0),this.b=void 0===h?i:h,this.e=void 0===_?i+s:_,r&&((this._next=r)._prev=this)}),wt=function(t,e,i,s,r,n){var a=new xt(t,e,i,s-i,r,-1,n);return a.b=i,a.e=a.xs0=s,a},bt=j.parseComplex=function(t,e,i,s,r,n,a,o,l,h){i=i||n||"","function"==typeof s&&(s=s(A,R)),a=new xt(t,e,0,0,a,h?2:1,null,!1,o,i,s),s+="",r&&gt.test(s+i)&&(s=[i,s],j.colorStringFilter(s),i=s[0],s=s[1]);var _,u,c,f,p,m,d,g,v,y,T,x,w,b=i.split(", ").join(",").split(" "),P=s.split(", ").join(",").split(" "),S=b.length,k=!1!==O;for(-1===s.indexOf(",")&&-1===i.indexOf(",")||(P=-1!==(s+i).indexOf("rgb")||-1!==(s+i).indexOf("hsl")?(b=b.join(" ").replace(I,", ").split(" "),P.join(" ").replace(I,", ").split(" ")):(b=b.join(" ").split(",").join(", ").split(" "),P.join(" ").split(",").join(", ").split(" ")),S=b.length),S!==P.length&&(S=(b=(n||"").split(" ")).length),a.plugin=l,a.setRatio=h,_=gt.lastIndex=0;_<S;_++)if(f=b[_],p=P[_]+"",(g=parseFloat(f))||0===g)a.appendXtra("",g,_t(p,g),p.replace(M,""),!(!k||-1===p.indexOf("px"))&&Math.round,!0);else if(r&&gt.test(f))x=")"+((x=p.indexOf(")")+1)?p.substr(x):""),w=-1!==p.indexOf("hsl")&&Q,y=p,f=mt(f,w),p=mt(p,w),(v=6<f.length+p.length)&&!Q&&0===p[3]?(a["xs"+a.l]+=a.l?" transparent":"transparent",a.e=a.e.split(P[_]).join("transparent")):(Q||(v=!1),w?a.appendXtra(y.substr(0,y.indexOf("hsl"))+(v?"hsla(":"hsl("),f[0],_t(p[0],f[0]),",",!1,!0).appendXtra("",f[1],_t(p[1],f[1]),"%,",!1).appendXtra("",f[2],_t(p[2],f[2]),v?"%,":"%"+x,!1):a.appendXtra(y.substr(0,y.indexOf("rgb"))+(v?"rgba(":"rgb("),f[0],p[0]-f[0],",",Math.round,!0).appendXtra("",f[1],p[1]-f[1],",",Math.round).appendXtra("",f[2],p[2]-f[2],v?",":x,Math.round),v&&(f=f.length<4?1:f[3],a.appendXtra("",f,(p.length<4?1:p[3])-f,x,!1))),gt.lastIndex=0;else if(m=f.match(C)){if(!(d=p.match(M))||d.length!==m.length)return a;for(u=c=0;u<m.length;u++)T=m[u],y=f.indexOf(T,c),a.appendXtra(f.substr(c,y-c),Number(T),_t(d[u],T),"",!(!k||"px"!==f.substr(y+T.length,2))&&Math.round,0===u),c=y+T.length;a["xs"+a.l]+=f.substr(c)}else a["xs"+a.l]+=a.l||a["xs"+a.l]?" "+p:p;if(-1!==s.indexOf("=")&&a.data){for(x=a.xs0+a.data.s,_=1;_<a.l;_++)x+=a["xs"+_]+a.data["xn"+_];a.e=x+a["xs"+_]}return a.l||(a.type=-1,a.xs0=a.e),a.xfirst||a},Pt=9;for((t=xt.prototype).l=t.pr=0;0<--Pt;)t["xn"+Pt]=0,t["xs"+Pt]="";t.xs0="",t._next=t._prev=t.xfirst=t.data=t.plugin=t.setRatio=t.rxp=null,t.appendXtra=function(t,e,i,s,r,n){var a=this,o=a.l;return a["xs"+o]+=n&&(o||a["xs"+o])?" "+t:t||"",i||0===o||a.plugin?(a.l++,a.type=a.setRatio?2:1,a["xs"+a.l]=s||"",0<o?(a.data["xn"+o]=e+i,a.rxp["xn"+o]=r,a["xn"+o]=e,a.plugin||(a.xfirst=new xt(a,"xn"+o,e,i,a.xfirst||a,0,a.n,r,a.pr),a.xfirst.xs0=0)):(a.data={s:e+i},a.rxp={},a.s=e,a.c=i,a.r=r),a):(a["xs"+o]+=e+(s||""),a)};var St=function(t,e){e=e||{},this.p=e.prefix&&J(t)||t,d[t]=d[this.p]=this,this.format=e.formatter||vt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},kt=r._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var s,r=t.split(","),n=e.defaultValue;for(i=i||[n],s=0;s<r.length;s++)e.prefix=0===s&&e.prefix,e.defaultValue=i[s]||n,new St(r[s],e)},Ot=r._registerPluginProp=function(t){if(!d[t]){var l=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";kt(t,{parser:function(t,e,i,s,r,n,a){var o=h.com.greensock.plugins[l];return o?(o._cssRegister(),d[i].parse(t,e,i,s,r,n,a)):(H("Error: "+l+" js file not loaded."),r)}})}};(t=St.prototype).parseComplex=function(t,e,i,s,r,n){var a,o,l,h,_,u,c=this.keyword;if(this.multi&&(I.test(i)||I.test(e)?(o=e.replace(I,"|").split("|"),l=i.replace(I,"|").split("|")):c&&(o=[e],l=[i])),l){for(h=l.length>o.length?l.length:o.length,a=0;a<h;a++)e=o[a]=o[a]||this.dflt,i=l[a]=l[a]||this.dflt,c&&(_=e.indexOf(c))!==(u=i.indexOf(c))&&(-1===u?o[a]=o[a].split(c).join(""):-1===_&&(o[a]+=" "+c));e=o.join(", "),i=l.join(", ")}return bt(t,this.p,e,i,this.clrs,this.dflt,s,this.pr,r,n)},t.parse=function(t,e,i,s,r,n,a){return this.parseComplex(t.style,this.format(et(t,this.p,k,!1,this.dflt)),this.format(e),r,n)},j.registerSpecialProp=function(t,l,h){kt(t,{parser:function(t,e,i,s,r,n,a){var o=new xt(t,i,0,0,r,2,i,!1,h);return o.plugin=n,o.setRatio=l(t,e,s._tween,i),o},priority:h})},j.useSVGTransformAttr=!0;var Rt,At,Ct,Mt,Dt,Et="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Ft=J("transform"),It=$+"transform",zt=J("transformOrigin"),Lt=null!==J("perspective"),Nt=r.Transform=function(){this.perspective=parseFloat(j.defaultTransformPerspective)||0,this.force3D=!(!1===j.defaultForce3D||!Lt)&&(j.defaultForce3D||"auto")},Xt=_gsScope.SVGElement,Bt=function(t,e,i){var s,r=N.createElementNS("http://www.w3.org/2000/svg",t),n=/([a-z])([A-Z])/g;for(s in i)r.setAttributeNS(null,s.replace(n,"$1-$2").toLowerCase(),i[s]);return e.appendChild(r),r},jt=N.documentElement||{},Ut=(Dt=S||/Android/i.test(W)&&!_gsScope.chrome,N.createElementNS&&!Dt&&(At=Bt("svg",jt),Mt=(Ct=Bt("rect",At,{width:100,height:50,x:100})).getBoundingClientRect().width,Ct.style[zt]="50% 50%",Ct.style[Ft]="scaleX(0.5)",Dt=Mt===Ct.getBoundingClientRect().width&&!(U&&Lt),jt.removeChild(At)),Dt),Yt=function(t,e,i,s,r,n){var a,o,l,h,_,u,c,f,p,m,d,g,v,y,T=t._gsTransform,x=Wt(t,!0);T&&(v=T.xOrigin,y=T.yOrigin),(!s||(a=s.split(" ")).length<2)&&(0===(c=t.getBBox()).x&&0===c.y&&c.width+c.height===0&&(c={x:parseFloat(t.hasAttribute("x")?t.getAttribute("x"):t.hasAttribute("cx")?t.getAttribute("cx"):0)||0,y:parseFloat(t.hasAttribute("y")?t.getAttribute("y"):t.hasAttribute("cy")?t.getAttribute("cy"):0)||0,width:0,height:0}),a=[(-1!==(e=ht(e).split(" "))[0].indexOf("%")?parseFloat(e[0])/100*c.width:parseFloat(e[0]))+c.x,(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*c.height:parseFloat(e[1]))+c.y]),i.xOrigin=h=parseFloat(a[0]),i.yOrigin=_=parseFloat(a[1]),s&&x!==Gt&&(u=x[0],c=x[1],f=x[2],p=x[3],m=x[4],d=x[5],(g=u*p-c*f)&&(o=h*(p/g)+_*(-f/g)+(f*d-p*m)/g,l=h*(-c/g)+_*(u/g)-(u*d-c*m)/g,h=i.xOrigin=a[0]=o,_=i.yOrigin=a[1]=l)),T&&(n&&(i.xOffset=T.xOffset,i.yOffset=T.yOffset,T=i),r||!1!==r&&!1!==j.defaultSmoothOrigin?(o=h-v,l=_-y,T.xOffset+=o*x[0]+l*x[2]-o,T.yOffset+=o*x[1]+l*x[3]-l):T.xOffset=T.yOffset=0),n||t.setAttribute("data-svg-origin",a.join(" "))},qt=function(t){var e,i=X("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,r=this.nextSibling,n=this.style.cssText;if(jt.appendChild(i),i.appendChild(this),this.style.display="block",t)try{e=this.getBBox(),this._originalGetBBox=this.getBBox,this.getBBox=qt}catch(t){}else this._originalGetBBox&&(e=this._originalGetBBox());return r?s.insertBefore(this,r):s.appendChild(this),jt.removeChild(i),this.style.cssText=n,e},Vt=function(t){return!(!Xt||!t.getCTM||t.parentNode&&!t.ownerSVGElement||!function(e){try{return e.getBBox()}catch(t){return qt.call(e,!0)}}(t))},Gt=[1,0,0,1,0,0],Wt=function(t,e){var i,s,r,n,a,o,l=t._gsTransform||new Nt,h=t.style;if(Ft?s=et(t,It,null,!0):t.currentStyle&&(s=(s=t.currentStyle.filter.match(c))&&4===s.length?[s[0].substr(4),Number(s[2].substr(4)),Number(s[1].substr(4)),s[3].substr(4),l.x||0,l.y||0].join(","):""),i=!s||"none"===s||"matrix(1, 0, 0, 1, 0, 0)"===s,!Ft||!(o=!tt(t)||"none"===tt(t).display)&&t.parentNode||(o&&(n=h.display,h.display="block"),t.parentNode||(a=1,jt.appendChild(t)),i=!(s=et(t,It,null,!0))||"none"===s||"matrix(1, 0, 0, 1, 0, 0)"===s,n?h.display=n:o&&Kt(h,"display"),a&&jt.removeChild(t)),(l.svg||t.getCTM&&Vt(t))&&(i&&-1!==(h[Ft]+"").indexOf("matrix")&&(s=h[Ft],i=0),r=t.getAttribute("transform"),i&&r&&(s="matrix("+(r=t.transform.baseVal.consolidate().matrix).a+","+r.b+","+r.c+","+r.d+","+r.e+","+r.f+")",i=0)),i)return Gt;for(r=(s||"").match(C)||[],Pt=r.length;-1<--Pt;)n=Number(r[Pt]),r[Pt]=(a=n-(n|=0))?(1e5*a+(a<0?-.5:.5)|0)/1e5+n:n;return e&&6<r.length?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Qt=r.getTransform=function(t,e,i,s){if(t._gsTransform&&i&&!s)return t._gsTransform;var r,n,a,o,l,h,_=i&&t._gsTransform||new Nt,u=_.scaleX<0,c=Lt&&(parseFloat(et(t,zt,e,!1,"0 0 0").split(" ")[2])||_.zOrigin)||0,f=parseFloat(j.defaultTransformPerspective)||0;if(_.svg=!(!t.getCTM||!Vt(t)),_.svg&&(Yt(t,et(t,zt,e,!1,"50% 50%")+"",_,t.getAttribute("data-svg-origin")),Rt=j.useSVGTransformAttr||Ut),(r=Wt(t))!==Gt){if(16===r.length){var p,m,d,g,v,y=r[0],T=r[1],x=r[2],w=r[3],b=r[4],P=r[5],S=r[6],k=r[7],O=r[8],R=r[9],A=r[10],C=r[12],M=r[13],D=r[14],E=r[11],F=Math.atan2(S,A);_.zOrigin&&(C=O*(D=-_.zOrigin)-r[12],M=R*D-r[13],D=A*D+_.zOrigin-r[14]),_.rotationX=F*q,F&&(p=b*(g=Math.cos(-F))+O*(v=Math.sin(-F)),m=P*g+R*v,d=S*g+A*v,O=b*-v+O*g,R=P*-v+R*g,A=S*-v+A*g,E=k*-v+E*g,b=p,P=m,S=d),F=Math.atan2(-x,A),_.rotationY=F*q,F&&(m=T*(g=Math.cos(-F))-R*(v=Math.sin(-F)),d=x*g-A*v,R=T*v+R*g,A=x*v+A*g,E=w*v+E*g,y=p=y*g-O*v,T=m,x=d),F=Math.atan2(T,y),_.rotation=F*q,F&&(p=y*(g=Math.cos(F))+T*(v=Math.sin(F)),m=b*g+P*v,d=O*g+R*v,T=T*g-y*v,P=P*g-b*v,R=R*g-O*v,y=p,b=m,O=d),_.rotationX&&359.9<Math.abs(_.rotationX)+Math.abs(_.rotation)&&(_.rotationX=_.rotation=0,_.rotationY=180-_.rotationY),F=Math.atan2(b,P),_.scaleX=(1e5*Math.sqrt(y*y+T*T+x*x)+.5|0)/1e5,_.scaleY=(1e5*Math.sqrt(P*P+S*S)+.5|0)/1e5,_.scaleZ=(1e5*Math.sqrt(O*O+R*R+A*A)+.5|0)/1e5,y/=_.scaleX,b/=_.scaleY,T/=_.scaleX,P/=_.scaleY,2e-5<Math.abs(F)?(_.skewX=F*q,b=0,"simple"!==_.skewType&&(_.scaleY*=1/Math.cos(F))):_.skewX=0,_.perspective=E?1/(E<0?-E:E):0,_.x=C,_.y=M,_.z=D,_.svg&&(_.x-=_.xOrigin-(_.xOrigin*y-_.yOrigin*b),_.y-=_.yOrigin-(_.yOrigin*T-_.xOrigin*P))}else if(!Lt||s||!r.length||_.x!==r[4]||_.y!==r[5]||!_.rotationX&&!_.rotationY){var I=6<=r.length,z=I?r[0]:1,L=r[1]||0,N=r[2]||0,X=I?r[3]:1;_.x=r[4]||0,_.y=r[5]||0,a=Math.sqrt(z*z+L*L),o=Math.sqrt(X*X+N*N),l=z||L?Math.atan2(L,z)*q:_.rotation||0,h=N||X?Math.atan2(N,X)*q+l:_.skewX||0,_.scaleX=a,_.scaleY=o,_.rotation=l,_.skewX=h,Lt&&(_.rotationX=_.rotationY=_.z=0,_.perspective=f,_.scaleZ=1),_.svg&&(_.x-=_.xOrigin-(_.xOrigin*z+_.yOrigin*N),_.y-=_.yOrigin-(_.xOrigin*L+_.yOrigin*X))}for(n in 90<Math.abs(_.skewX)&&Math.abs(_.skewX)<270&&(u?(_.scaleX*=-1,_.skewX+=_.rotation<=0?180:-180,_.rotation+=_.rotation<=0?180:-180):(_.scaleY*=-1,_.skewX+=_.skewX<=0?180:-180)),_.zOrigin=c,_)_[n]<2e-5&&-2e-5<_[n]&&(_[n]=0)}return i&&(t._gsTransform=_).svg&&(Rt&&t.style[Ft]?B.delayedCall(.001,function(){Kt(t.style,Ft)}):!Rt&&t.getAttribute("transform")&&B.delayedCall(.001,function(){t.removeAttribute("transform")})),_},Zt=function(t){var e,i,s=this.data,r=-s.rotation*Y,n=r+s.skewX*Y,a=1e5,o=(Math.cos(r)*s.scaleX*a|0)/a,l=(Math.sin(r)*s.scaleX*a|0)/a,h=(Math.sin(n)*-s.scaleY*a|0)/a,_=(Math.cos(n)*s.scaleY*a|0)/a,u=this.t.style,c=this.t.currentStyle;if(c){i=l,l=-h,h=-i,e=c.filter,u.filter="";var f,p,m=this.t.offsetWidth,d=this.t.offsetHeight,g="absolute"!==c.position,v="progid:DXImageTransform.Microsoft.Matrix(M11="+o+", M12="+l+", M21="+h+", M22="+_,y=s.x+m*s.xPercent/100,T=s.y+d*s.yPercent/100;if(null!=s.ox&&(y+=(f=(s.oxp?m*s.ox*.01:s.ox)-m/2)-(f*o+(p=(s.oyp?d*s.oy*.01:s.oy)-d/2)*l),T+=p-(f*h+p*_)),v+=g?", Dx="+((f=m/2)-(f*o+(p=d/2)*l)+y)+", Dy="+(p-(f*h+p*_)+T)+")":", sizingMethod='auto expand')",-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?u.filter=e.replace(F,v):u.filter=v+" "+e,0!==t&&1!==t||1===o&&0===l&&0===h&&1===_&&(g&&-1===v.indexOf("Dx=0, Dy=0")||E.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&u.removeAttribute("filter")),!g){var x,w,b,P=S<8?1:-1;for(f=s.ieOffsetX||0,p=s.ieOffsetY||0,s.ieOffsetX=Math.round((m-((o<0?-o:o)*m+(l<0?-l:l)*d))/2+y),s.ieOffsetY=Math.round((d-((_<0?-_:_)*d+(h<0?-h:h)*m))/2+T),Pt=0;Pt<4;Pt++)b=(i=-1!==(x=c[w=ot[Pt]]).indexOf("px")?parseFloat(x):it(this.t,w,parseFloat(x),x.replace(D,""))||0)!==s[w]?Pt<2?-s.ieOffsetX:-s.ieOffsetY:Pt<2?f-s.ieOffsetX:p-s.ieOffsetY,u[w]=(s[w]=Math.round(i-b*(0===Pt||2===Pt?1:P)))+"px"}}},Ht=r.set3DTransformRatio=r.setTransformRatio=function(t){var e,i,s,r,n,a,o,l,h,_,u,c,f,p,m,d,g,v,y,T,x,w,b,P=this.data,S=this.t.style,k=P.rotation,O=P.rotationX,R=P.rotationY,A=P.scaleX,C=P.scaleY,M=P.scaleZ,D=P.x,E=P.y,F=P.z,I=P.svg,z=P.perspective,L=P.force3D,N=P.skewY,X=P.skewX;if(N&&(X+=N,k+=N),!((1!==t&&0!==t||"auto"!==L||this.tween._totalTime!==this.tween._totalDuration&&this.tween._totalTime)&&L||F||z||R||O||1!==M)||Rt&&I||!Lt)k||X||I?(k*=Y,w=X*Y,b=1e5,i=Math.cos(k)*A,n=Math.sin(k)*A,s=Math.sin(k-w)*-C,a=Math.cos(k-w)*C,w&&"simple"===P.skewType&&(e=Math.tan(w-N*Y),s*=e=Math.sqrt(1+e*e),a*=e,N&&(e=Math.tan(N*Y),i*=e=Math.sqrt(1+e*e),n*=e)),I&&(D+=P.xOrigin-(P.xOrigin*i+P.yOrigin*s)+P.xOffset,E+=P.yOrigin-(P.xOrigin*n+P.yOrigin*a)+P.yOffset,Rt&&(P.xPercent||P.yPercent)&&(m=this.t.getBBox(),D+=.01*P.xPercent*m.width,E+=.01*P.yPercent*m.height),D<(m=1e-6)&&-m<D&&(D=0),E<m&&-m<E&&(E=0)),y=(i*b|0)/b+","+(n*b|0)/b+","+(s*b|0)/b+","+(a*b|0)/b+","+D+","+E+")",I&&Rt?this.t.setAttribute("transform","matrix("+y):S[Ft]=(P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) matrix(":"matrix(")+y):S[Ft]=(P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) matrix(":"matrix(")+A+",0,0,"+C+","+D+","+E+")";else{if(U&&(A<(m=1e-4)&&-m<A&&(A=M=2e-5),C<m&&-m<C&&(C=M=2e-5),!z||P.z||P.rotationX||P.rotationY||(z=0)),k||X)k*=Y,d=i=Math.cos(k),g=n=Math.sin(k),X&&(k-=X*Y,d=Math.cos(k),g=Math.sin(k),"simple"===P.skewType&&(e=Math.tan((X-N)*Y),d*=e=Math.sqrt(1+e*e),g*=e,P.skewY&&(e=Math.tan(N*Y),i*=e=Math.sqrt(1+e*e),n*=e))),s=-g,a=d;else{if(!(R||O||1!==M||z||I))return void(S[Ft]=(P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) translate3d(":"translate3d(")+D+"px,"+E+"px,"+F+"px)"+(1!==A||1!==C?" scale("+A+","+C+")":""));i=a=1,s=n=0}_=1,r=o=l=h=u=c=0,f=z?-1/z:0,p=P.zOrigin,m=1e-6,T=",",x="0",(k=R*Y)&&(d=Math.cos(k),u=f*(l=-(g=Math.sin(k))),r=i*g,o=n*g,f*=_=d,i*=d,n*=d),(k=O*Y)&&(e=s*(d=Math.cos(k))+r*(g=Math.sin(k)),v=a*d+o*g,h=_*g,c=f*g,r=s*-g+r*d,o=a*-g+o*d,_*=d,f*=d,s=e,a=v),1!==M&&(r*=M,o*=M,_*=M,f*=M),1!==C&&(s*=C,a*=C,h*=C,c*=C),1!==A&&(i*=A,n*=A,l*=A,u*=A),(p||I)&&(p&&(D+=r*-p,E+=o*-p,F+=_*-p+p),I&&(D+=P.xOrigin-(P.xOrigin*i+P.yOrigin*s)+P.xOffset,E+=P.yOrigin-(P.xOrigin*n+P.yOrigin*a)+P.yOffset),D<m&&-m<D&&(D=x),E<m&&-m<E&&(E=x),F<m&&-m<F&&(F=0)),y=P.xPercent||P.yPercent?"translate("+P.xPercent+"%,"+P.yPercent+"%) matrix3d(":"matrix3d(",y+=(i<m&&-m<i?x:i)+T+(n<m&&-m<n?x:n)+T+(l<m&&-m<l?x:l),y+=T+(u<m&&-m<u?x:u)+T+(s<m&&-m<s?x:s)+T+(a<m&&-m<a?x:a),O||R||1!==M?(y+=T+(h<m&&-m<h?x:h)+T+(c<m&&-m<c?x:c)+T+(r<m&&-m<r?x:r),y+=T+(o<m&&-m<o?x:o)+T+(_<m&&-m<_?x:_)+T+(f<m&&-m<f?x:f)+T):y+=",0,0,0,0,1,0,",y+=D+T+E+T+F+T+(z?1+-F/z:1)+")",S[Ft]=y}};(t=Nt.prototype).x=t.y=t.z=t.skewX=t.skewY=t.rotation=t.rotationX=t.rotationY=t.zOrigin=t.xPercent=t.yPercent=t.xOffset=t.yOffset=0,t.scaleX=t.scaleY=t.scaleZ=1,kt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,s,r,n,a){if(s._lastParsedTransform===a)return r;var o,l=(s._lastParsedTransform=a).scale&&"function"==typeof a.scale?a.scale:0;"function"==typeof a[i]&&(o=a[i],a[i]=e),l&&(a.scale=l(A,t));var h,_,u,c,f,p,m,d,g,v=t._gsTransform,y=t.style,T=Et.length,x=a,w={},b="transformOrigin",P=Qt(t,k,!0,x.parseTransform),S=x.transform&&("function"==typeof x.transform?x.transform(A,R):x.transform);if(P.skewType=x.skewType||P.skewType||j.defaultSkewType,s._transform=P,"rotationZ"in x&&(x.rotation=x.rotationZ),S&&"string"==typeof S&&Ft)(_=V.style)[Ft]=S,_.display="block",_.position="absolute",-1!==S.indexOf("%")&&(_.width=et(t,"width"),_.height=et(t,"height")),N.body.appendChild(V),h=Qt(V,null,!1),"simple"===P.skewType&&(h.scaleY*=Math.cos(h.skewX*Y)),P.svg&&(p=P.xOrigin,m=P.yOrigin,h.x-=P.xOffset,h.y-=P.yOffset,(x.transformOrigin||x.svgOrigin)&&(S={},Yt(t,ht(x.transformOrigin),S,x.svgOrigin,x.smoothOrigin,!0),p=S.xOrigin,m=S.yOrigin,h.x-=S.xOffset-P.xOffset,h.y-=S.yOffset-P.yOffset),(p||m)&&(d=Wt(V,!0),h.x-=p-(p*d[0]+m*d[2]),h.y-=m-(p*d[1]+m*d[3]))),N.body.removeChild(V),h.perspective||(h.perspective=P.perspective),null!=x.xPercent&&(h.xPercent=ut(x.xPercent,P.xPercent)),null!=x.yPercent&&(h.yPercent=ut(x.yPercent,P.yPercent));else if("object"==typeof x){if(h={scaleX:ut(null!=x.scaleX?x.scaleX:x.scale,P.scaleX),scaleY:ut(null!=x.scaleY?x.scaleY:x.scale,P.scaleY),scaleZ:ut(x.scaleZ,P.scaleZ),x:ut(x.x,P.x),y:ut(x.y,P.y),z:ut(x.z,P.z),xPercent:ut(x.xPercent,P.xPercent),yPercent:ut(x.yPercent,P.yPercent),perspective:ut(x.transformPerspective,P.perspective)},null!=(f=x.directionalRotation))if("object"==typeof f)for(_ in f)x[_]=f[_];else x.rotation=f;"string"==typeof x.x&&-1!==x.x.indexOf("%")&&(h.x=0,h.xPercent=ut(x.x,P.xPercent)),"string"==typeof x.y&&-1!==x.y.indexOf("%")&&(h.y=0,h.yPercent=ut(x.y,P.yPercent)),h.rotation=ct("rotation"in x?x.rotation:"shortRotation"in x?x.shortRotation+"_short":P.rotation,P.rotation,"rotation",w),Lt&&(h.rotationX=ct("rotationX"in x?x.rotationX:"shortRotationX"in x?x.shortRotationX+"_short":P.rotationX||0,P.rotationX,"rotationX",w),h.rotationY=ct("rotationY"in x?x.rotationY:"shortRotationY"in x?x.shortRotationY+"_short":P.rotationY||0,P.rotationY,"rotationY",w)),h.skewX=ct(x.skewX,P.skewX),h.skewY=ct(x.skewY,P.skewY)}for(Lt&&null!=x.force3D&&(P.force3D=x.force3D,c=!0),(u=P.force3D||P.z||P.rotationX||P.rotationY||h.z||h.rotationX||h.rotationY||h.perspective)||null==x.scale||(h.scaleZ=1);-1<--T;)(1e-6<(S=h[g=Et[T]]-P[g])||S<-1e-6||null!=x[g]||null!=L[g])&&(c=!0,r=new xt(P,g,P[g],S,r),g in w&&(r.e=w[g]),r.xs0=0,r.plugin=n,s._overwriteProps.push(r.n));return S=x.transformOrigin,P.svg&&(S||x.svgOrigin)&&(p=P.xOffset,m=P.yOffset,Yt(t,ht(S),h,x.svgOrigin,x.smoothOrigin),r=wt(P,"xOrigin",(v?P:h).xOrigin,h.xOrigin,r,b),r=wt(P,"yOrigin",(v?P:h).yOrigin,h.yOrigin,r,b),p===P.xOffset&&m===P.yOffset||(r=wt(P,"xOffset",v?p:P.xOffset,P.xOffset,r,b),r=wt(P,"yOffset",v?m:P.yOffset,P.yOffset,r,b)),S="0px 0px"),(S||Lt&&u&&P.zOrigin)&&(Ft?(c=!0,g=zt,S=(S||et(t,g,k,!1,"50% 50%"))+"",(r=new xt(y,g,0,0,r,-1,b)).b=y[g],r.plugin=n,r.xs0=r.e=Lt?(_=P.zOrigin,S=S.split(" "),P.zOrigin=(2<S.length&&(0===_||"0px"!==S[2])?parseFloat(S[2]):_)||0,r.xs0=r.e=S[0]+" "+(S[1]||"50%")+" 0px",(r=new xt(P,"zOrigin",0,0,r,-1,r.n)).b=_,P.zOrigin):S):ht(S+"",P)),c&&(s._transformType=P.svg&&Rt||!u&&3!==this._transformType?2:3),o&&(a[i]=o),l&&(a.scale=l),r},prefix:!0}),kt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),kt("borderRadius",{defaultValue:"0px",parser:function(t,e,i,s,r,n){e=this.format(e);var a,o,l,h,_,u,c,f,p,m,d,g,v,y,T,x,w=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],b=t.style;for(p=parseFloat(t.offsetWidth),m=parseFloat(t.offsetHeight),a=e.split(" "),o=0;o<w.length;o++)this.p.indexOf("border")&&(w[o]=J(w[o])),-1!==(_=h=et(t,w[o],k,!1,"0px")).indexOf(" ")&&(_=(h=_.split(" "))[0],h=h[1]),u=l=a[o],c=parseFloat(_),g=_.substr((c+"").length),""===(d=(v="="===u.charAt(1))?(f=parseInt(u.charAt(0)+"1",10),u=u.substr(2),f*=parseFloat(u),u.substr((f+"").length-(f<0?1:0))||""):(f=parseFloat(u),u.substr((f+"").length)))&&(d=P[i]||g),d!==g&&(y=it(t,"borderLeft",c,g),T=it(t,"borderTop",c,g),h="%"===d?(_=y/p*100+"%",T/m*100+"%"):"em"===d?(_=y/(x=it(t,"borderLeft",1,"em"))+"em",T/x+"em"):(_=y+"px",T+"px"),v&&(u=parseFloat(_)+f+d,l=parseFloat(h)+f+d)),r=bt(b,w[o],_+" "+h,u+" "+l,!1,"0px",r);return r},prefix:!0,formatter:vt("0px 0px 0px 0px",!1,!0)}),kt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,s,r,n){return bt(t.style,i,this.format(et(t,i,k,!1,"0px 0px")),this.format(e),!1,"0px",r)},prefix:!0,formatter:vt("0px 0px",!1,!0)}),kt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,s,r,n){var a,o,l,h,_,u,c="background-position",f=k||tt(t,null),p=this.format((f?S?f.getPropertyValue(c+"-x")+" "+f.getPropertyValue(c+"-y"):f.getPropertyValue(c):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),m=this.format(e);if(-1!==p.indexOf("%")!=(-1!==m.indexOf("%"))&&m.split(",").length<2&&(u=et(t,"backgroundImage").replace(b,""))&&"none"!==u){for(a=p.split(" "),o=m.split(" "),G.setAttribute("src",u),l=2;-1<--l;)(h=-1!==(p=a[l]).indexOf("%"))!==(-1!==o[l].indexOf("%"))&&(_=0===l?t.offsetWidth-G.width:t.offsetHeight-G.height,a[l]=h?parseFloat(p)/100*_+"px":parseFloat(p)/_*100+"%");p=a.join(" ")}return this.parseComplex(t.style,p,m,r,n)},formatter:ht}),kt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return"co"===(t+="").substr(0,2)?t:ht(-1===t.indexOf(" ")?t+" "+t:t)}}),kt("perspective",{defaultValue:"0px",prefix:!0}),kt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),kt("transformStyle",{prefix:!0}),kt("backfaceVisibility",{prefix:!0}),kt("userSelect",{prefix:!0}),kt("margin",{parser:yt("marginTop,marginRight,marginBottom,marginLeft")}),kt("padding",{parser:yt("paddingTop,paddingRight,paddingBottom,paddingLeft")}),kt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,s,r,n){var a,o,l;return e=S<9?(o=t.currentStyle,l=S<8?" ":",",a="rect("+o.clipTop+l+o.clipRight+l+o.clipBottom+l+o.clipLeft+")",this.format(e).split(",").join(l)):(a=this.format(et(t,this.p,k,!1,this.dflt)),this.format(e)),this.parseComplex(t.style,a,e,r,n)}}),kt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),kt("autoRound,strictUnits",{parser:function(t,e,i,s,r){return r}}),kt("border",{defaultValue:"0px solid #000",parser:function(t,e,i,s,r,n){var a=et(t,"borderTopWidth",k,!1,"0px"),o=this.format(e).split(" "),l=o[0].replace(D,"");return"px"!==l&&(a=parseFloat(a)/it(t,"borderTopWidth",1,l)+l),this.parseComplex(t.style,this.format(a+" "+et(t,"borderTopStyle",k,!1,"solid")+" "+et(t,"borderTopColor",k,!1,"#000")),o.join(" "),r,n)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(gt)||["#000"])[0]}}),kt("borderWidth",{parser:yt("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),kt("float,cssFloat,styleFloat",{parser:function(t,e,i,s,r,n){var a=t.style,o="cssFloat"in a?"cssFloat":"styleFloat";return new xt(a,o,0,0,r,-1,i,!1,0,a[o],e)}});var $t=function(t){var e,i=this.t,s=i.filter||et(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(e=-1===s.indexOf("atrix(")&&-1===s.indexOf("radient(")&&-1===s.indexOf("oader(")?(i.removeAttribute("filter"),!et(this.data,"filter")):(i.filter=s.replace(a,""),!0)),e||(this.xn1&&(i.filter=s=s||"alpha(opacity="+r+")"),-1===s.indexOf("pacity")?0===r&&this.xn1||(i.filter=s+" alpha(opacity="+r+")"):i.filter=s.replace(E,"opacity="+r))};kt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,s,r,n){var a=parseFloat(et(t,"opacity",k,!1,"1")),o=t.style,l="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),l&&1===a&&"hidden"===et(t,"visibility",k)&&0!==e&&(a=0),Q?r=new xt(o,"opacity",a,e-a,r):((r=new xt(o,"opacity",100*a,100*(e-a),r)).xn1=l?1:0,o.zoom=1,r.type=2,r.b="alpha(opacity="+r.s+")",r.e="alpha(opacity="+(r.s+r.c)+")",r.data=t,r.plugin=n,r.setRatio=$t),l&&((r=new xt(o,"visibility",0,0,r,-1,null,!1,0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit")).xs0="inherit",s._overwriteProps.push(r.n),s._overwriteProps.push(i)),r}});var Kt=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(o,"-$1").toLowerCase())):t.removeAttribute(e))},Jt=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Kt(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};kt("className",{parser:function(t,e,i,s,r,n,a){var o,l,h,_,u,c=t.getAttribute("class")||"",f=t.style.cssText;if((r=s._classNamePT=new xt(t,i,0,0,r,2)).setRatio=Jt,r.pr=-11,p=!0,r.b=c,l=rt(t,k),h=t._gsClassPT){for(_={},u=h.data;u;)_[u.p]=1,u=u._next;h.setRatio(1)}return(t._gsClassPT=r).e="="!==e.charAt(1)?e:c.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",r.e),o=nt(t,l,rt(t),a,_),t.setAttribute("class",c),r.data=o.firstMPT,t.style.cssText=f,r=r.xfirst=s.parse(t,o.difs,r,n)}});var te=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,s,r,n,a=this.t.style,o=d.transform.parse;if("all"===this.e)r=!(a.cssText="");else for(s=(e=this.e.split(" ").join("").split(",")).length;-1<--s;)i=e[s],d[i]&&(d[i].parse===o?r=!0:i="transformOrigin"===i?zt:d[i].p),Kt(a,i);r&&(Kt(a,Ft),(n=this.t._gsTransform)&&(n.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(kt("clearProps",{parser:function(t,e,i,s,r){return(r=new xt(t,i,0,0,r,2)).setRatio=te,r.e=e,r.pr=-10,r.data=s._tween,p=!0,r}}),t="bezier,throwProps,physicsProps,physics2D".split(","),Pt=t.length;Pt--;)Ot(t[Pt]);(t=j.prototype)._firstPT=t._lastParsedTransform=t._transform=null,t._onInitTween=function(t,e,i,s){if(!t.nodeType)return!1;this._target=R=t,this._tween=i,this._vars=e,A=s,O=e.autoRound,p=!1,P=e.suffixMap||j.suffixMap,k=tt(t,""),m=this._overwriteProps;var r,n,a,o,l,h,_,u,c,f=t.style;if(g&&""===f.zIndex&&("auto"!==(r=et(t,"zIndex",k))&&""!==r||this._addLazySet(f,"zIndex",0)),"string"==typeof e&&(o=f.cssText,r=rt(t,k),f.cssText=o+";"+e,r=nt(t,r,rt(t)).difs,!Q&&x.test(e)&&(r.opacity=parseFloat(RegExp.$1)),e=r,f.cssText=o),e.className?this._firstPT=n=d.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=n=this.parse(t,e,null),this._transformType){for(c=3===this._transformType,Ft?v&&(g=!0,""===f.zIndex&&("auto"!==(_=et(t,"zIndex",k))&&""!==_||this._addLazySet(f,"zIndex",0)),y&&this._addLazySet(f,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(c?"visible":"hidden"))):f.zoom=1,a=n;a&&a._next;)a=a._next;u=new xt(t,"transform",0,0,null,2),this._linkCSSP(u,null,a),u.setRatio=Ft?Ht:Zt,u.data=this._transform||Qt(t,k,!0),u.tween=i,u.pr=-1,m.pop()}if(p){for(;n;){for(h=n._next,a=o;a&&a.pr>n.pr;)a=a._next;(n._prev=a?a._prev:l)?n._prev._next=n:o=n,(n._next=a)?a._prev=n:l=n,n=h}this._firstPT=o}return!0},t.parse=function(t,e,i,s){var r,n,a,o,l,h,_,u,c,f,p=t.style;for(r in e){if("function"==typeof(h=e[r])&&(h=h(A,R)),n=d[r])i=n.parse(t,h,r,this,i,s,e);else{if("--"===r.substr(0,2)){this._tween._propLookup[r]=this._addTween.call(this._tween,t.style,"setProperty",tt(t).getPropertyValue(r)+"",h+"",r,!1,r);continue}l=et(t,r,k)+"",c="string"==typeof h,"color"===r||"fill"===r||"stroke"===r||-1!==r.indexOf("Color")||c&&w.test(h)?(c||(h=(3<(h=mt(h)).length?"rgba(":"rgb(")+h.join(",")+")"),i=bt(p,r,l,h,!0,"transparent",i,0,s)):c&&z.test(h)?i=bt(p,r,l,h,!0,null,i,0,s):(_=(a=parseFloat(l))||0===a?l.substr((a+"").length):"",""!==l&&"auto"!==l||(_="width"===r||"height"===r?(a=lt(t,r,k),"px"):"left"===r||"top"===r?(a=st(t,r,k),"px"):(a="opacity"!==r?0:1,"")),""===(u=(f=c&&"="===h.charAt(1))?(o=parseInt(h.charAt(0)+"1",10),h=h.substr(2),o*=parseFloat(h),h.replace(D,"")):(o=parseFloat(h),c?h.replace(D,""):""))&&(u=r in P?P[r]:_),h=o||0===o?(f?o+a:o)+u:e[r],_!==u&&(""===u&&"lineHeight"!==r||(o||0===o)&&a&&(a=it(t,r,a,_),"%"===u?(a/=it(t,r,100,"%")/100,!0!==e.strictUnits&&(l=a+"%")):"em"===u||"rem"===u||"vw"===u||"vh"===u?a/=it(t,r,1,u):"px"!==u&&(o=it(t,r,o,u),u="px"),f&&(o||0===o)&&(h=o+a+u))),f&&(o+=a),!a&&0!==a||!o&&0!==o?void 0!==p[r]&&(h||h+""!="NaN"&&null!=h)?(i=new xt(p,r,o||a||0,0,i,-1,r,!1,0,l,h)).xs0="none"!==h||"display"!==r&&-1===r.indexOf("Style")?h:l:H("invalid "+r+" tween value: "+e[r]):(i=new xt(p,r,a,o-a,i,0,r,!1!==O&&("px"===u||"zIndex"===r),0,l,h)).xs0=u)}s&&i&&!i.plugin&&(i.plugin=s)}return i},t.setRatio=function(t){var e,i,s,r=this._firstPT;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||-1e-6===this._tween._rawPrevTime)for(;r;){if(e=r.c*t+r.s,r.r?e=r.r(e):e<1e-6&&-1e-6<e&&(e=0),r.type)if(1===r.type)if(2===(s=r.l))r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===s)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,s=1;s<r.l;s++)i+=r["xn"+s]+r["xs"+(s+1)];r.t[r.p]=i}else-1===r.type?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&-1!==r.type)if(e=r.r(r.s+r.c),r.type){if(1===r.type){for(s=r.l,i=r.xs0+e+r.xs1,s=1;s<r.l;s++)i+=r["xn"+s]+r["xs"+(s+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},t._enableTransforms=function(t){this._transform=this._transform||Qt(this._target,k,!0),this._transformType=this._transform.svg&&Rt||!t&&3!==this._transformType?2:3};var ee=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};t._addLazySet=function(t,e,i){var s=this._firstPT=new xt(t,e,0,0,this._firstPT,2);s.e=i,s.setRatio=ee,s.data=this},t._linkCSSP=function(t,e,i,s){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,s=!0),i?i._next=t:s||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},t._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&(e.r=t[e.p]),e=e._next},t._kill=function(t){var e,i,s,r=t;if(t.autoAlpha||t.alpha){for(i in r={},t)r[i]=t[i];r.opacity=1,r.autoAlpha&&(r.visibility=1)}for(t.className&&(e=this._classNamePT)&&((s=e.xfirst)&&s._prev?this._linkCSSP(s._prev,e._next,s._prev._prev):s===this._firstPT&&(this._firstPT=e._next),e._next&&this._linkCSSP(e._next,e._next._next,s._prev),this._classNamePT=null),e=this._firstPT;e;)e.plugin&&e.plugin!==i&&e.plugin._kill&&(e.plugin._kill(t),i=e.plugin),e=e._next;return n.prototype._kill.call(this,r)};var ie=function(t,e,i){var s,r,n,a;if(t.slice)for(r=t.length;-1<--r;)ie(t[r],e,i);else for(r=(s=t.childNodes).length;-1<--r;)a=(n=s[r]).type,n.style&&(e.push(rt(n)),i&&i.push(n)),1!==a&&9!==a&&11!==a||!n.childNodes.length||ie(n,e,i)};return j.cascadeTo=function(t,e,i){var s,r,n,a,o=B.to(t,e,i),l=[o],h=[],_=[],u=[],c=B._internals.reservedProps;for(t=o._targets||o.target,ie(t,h,u),o.render(e,!0,!0),ie(t,_),o.render(0,!0,!0),o._enabled(!0),s=u.length;-1<--s;)if((r=nt(u[s],h[s],_[s])).firstMPT){for(n in r=r.difs,i)c[n]&&(r[n]=i[n]);for(n in a={},r)a[n]=h[s][n];l.push(B.fromTo(u[s],e,a,r))}return l},n.activate([j]),j},!0),e=_gsScope._gsDefine.plugin({propName:"roundProps",version:"1.7.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),l=function(e){var i=e<1?Math.pow(10,(e+"").length-2):1;return function(t){return(Math.round(t/e)*e*i|0)/i}},h=function(t,e){for(;t;)t.f||t.blob||(t.m=e||Math.round),t=t._next},(s=e.prototype)._onInitAllProps=function(){var t,e,i,s,r=this._tween,n=r.vars.roundProps,a={},o=r._propLookup.roundProps;if("object"!=typeof n||n.push)for("string"==typeof n&&(n=n.split(",")),i=n.length;-1<--i;)a[n[i]]=Math.round;else for(s in n)a[s]=l(n[s]);for(s in a)for(t=r._firstPT;t;)e=t._next,t.pg?t.t._mod(a):t.n===s&&(2===t.f&&t.t?h(t.t._firstPT,a[s]):(this._add(t.t,s,t.s,t.c,a[s]),e&&(e._prev=t._prev),t._prev?t._prev._next=e:r._firstPT===t&&(r._firstPT=e),t._next=t._prev=null,r._propLookup[s]=o)),t=e;return!1},s._add=function(t,e,i,s,r){this._addTween(t,e,i,i+s,e,r||Math.round),this._overwriteProps.push(e)},_gsScope._gsDefine.plugin({propName:"attr",API:2,version:"0.6.1",init:function(t,e,i,s){var r,n;if("function"!=typeof t.setAttribute)return!1;for(r in e)"function"==typeof(n=e[r])&&(n=n(s,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",n+"",r,!1,r),this._overwriteProps.push(r);return!0}}),_gsScope._gsDefine.plugin({propName:"directionalRotation",version:"0.3.1",API:2,init:function(t,e,i,s){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,n,a,o,l,h,_=!0===e.useRadians?2*Math.PI:360;for(r in e)"useRadians"!==r&&("function"==typeof(o=e[r])&&(o=o(s,t)),n=(h=(o+"").split("_"))[0],a=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),l=(o=this.finals[r]="string"==typeof n&&"="===n.charAt(1)?a+parseInt(n.charAt(0)+"1",10)*Number(n.substr(2)):Number(n)||0)-a,h.length&&(-1!==(n=h.join("_")).indexOf("short")&&(l%=_)!==l%(_/2)&&(l=l<0?l+_:l-_),-1!==n.indexOf("_cw")&&l<0?l=(l+9999999999*_)%_-(l/_|0)*_:-1!==n.indexOf("ccw")&&0<l&&(l=(l-9999999999*_)%_-(l/_|0)*_)),(1e-6<l||l<-1e-6)&&(this._addTween(t,r,a,a+l,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}})._autoCSS=!0,_gsScope._gsDefine("easing.Back",["easing.Ease"],function(d){var i,s,e,t,r=_gsScope.GreenSockGlobals||_gsScope,n=r.com.greensock,a=2*Math.PI,o=Math.PI/2,l=n._class,h=function(t,e){var i=l("easing."+t,function(){},!0),s=i.prototype=new d;return s.constructor=i,s.getRatio=e,i},_=d.register||function(){},u=function(t,e,i,s,r){var n=l("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new s},!0);return _(n,t),n},g=function(t,e,i){this.t=t,this.v=e,i&&(((this.next=i).prev=this).c=i.v-e,this.gap=i.t-t)},c=function(t,e){var i=l("easing."+t,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),s=i.prototype=new d;return s.constructor=i,s.getRatio=e,s.config=function(t){return new i(t)},i},f=u("Back",c("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),c("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),c("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),p=l("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:1<t&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=!0===i},!0),m=p.prototype=new d;return m.constructor=p,m.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1===t?0:1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},p.ease=new p(.7,.7),m.config=p.config=function(t,e,i){return new p(t,e,i)},(m=(i=l("easing.SteppedEase",function(t,e){t=t||1,this._p1=1/t,this._p2=t+(e?0:1),this._p3=e?1:0},!0)).prototype=new d).constructor=i,m.getRatio=function(t){return t<0?t=0:1<=t&&(t=.999999999),((this._p2*t|0)+this._p3)*this._p1},m.config=i.config=function(t,e){return new i(t,e)},(m=(s=l("easing.ExpoScaleEase",function(t,e,i){this._p1=Math.log(e/t),this._p2=e-t,this._p3=t,this._ease=i},!0)).prototype=new d).constructor=s,m.getRatio=function(t){return this._ease&&(t=this._ease.getRatio(t)),(this._p3*Math.exp(this._p1*t)-this._p3)/this._p2},m.config=s.config=function(t,e,i){return new s(t,e,i)},(m=(e=l("easing.RoughEase",function(t){for(var e,i,s,r,n,a,o=(t=t||{}).taper||"none",l=[],h=0,_=0|(t.points||20),u=_,c=!1!==t.randomize,f=!0===t.clamp,p=t.template instanceof d?t.template:null,m="number"==typeof t.strength?.4*t.strength:.4;-1<--u;)e=c?Math.random():1/_*u,i=p?p.getRatio(e):e,s="none"===o?m:"out"===o?(r=1-e)*r*m:"in"===o?e*e*m:e<.5?(r=2*e)*r*.5*m:(r=2*(1-e))*r*.5*m,c?i+=Math.random()*s-.5*s:u%2?i+=.5*s:i-=.5*s,f&&(1<i?i=1:i<0&&(i=0)),l[h++]={x:e,y:i};for(l.sort(function(t,e){return t.x-e.x}),a=new g(1,1,null),u=_;-1<--u;)n=l[u],a=new g(n.x,n.y,a);this._prev=new g(0,0,0!==a.t?a:a.next)},!0)).prototype=new d).constructor=e,m.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return(this._prev=e).v+(t-e.t)/e.gap*e.c},m.config=function(t){return new e(t)},e.ease=new e,u("Bounce",h("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),h("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),h("BounceInOut",function(t){var e=t<.5;return(t=e?1-2*t:2*t-1)<1/2.75?t*=7.5625*t:t=t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),u("Circ",h("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),h("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),h("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),u("Elastic",(t=function(t,e,i){var s=l("easing."+t,function(t,e){this._p1=1<=t?t:1,this._p2=(e||i)/(t<1?t:1),this._p3=this._p2/a*(Math.asin(1/this._p1)||0),this._p2=a/this._p2},!0),r=s.prototype=new d;return r.constructor=s,r.getRatio=e,r.config=function(t,e){return new s(t,e)},s})("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),t("ElasticIn",function(t){return-this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)},.3),t("ElasticInOut",function(t){return(t*=2)<1?this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)*-.5:this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),u("Expo",h("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),h("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),h("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),u("Sine",h("SineOut",function(t){return Math.sin(t*o)}),h("SineIn",function(t){return 1-Math.cos(t*o)}),h("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),l("easing.EaseLookup",{find:function(t){return d.map[t]}},!0),_(r.SlowMo,"SlowMo","ease,"),_(e,"RoughEase","ease,"),_(i,"SteppedEase","ease,"),f},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()(),function(c,f){"use strict";var p={},s=c.document,m=c.GreenSockGlobals=c.GreenSockGlobals||c,t=m[f];if(t)return"undefined"!=typeof module&&module.exports&&(module.exports=t);var e,i,r,d,g,n,a,v=function(t){var e,i=t.split("."),s=m;for(e=0;e<i.length;e++)s[i[e]]=s=s[i[e]]||{};return s},u=v("com.greensock"),y=1e-10,l=function(t){var e,i=[],s=t.length;for(e=0;e!==s;i.push(t[e++]));return i},T=function(){},x=(n=Object.prototype.toString,a=n.call([]),function(t){return null!=t&&(t instanceof Array||"object"==typeof t&&!!t.push&&n.call(t)===a)}),w={},b=function(o,l,h,_){this.sc=w[o]?w[o].sc:[],(w[o]=this).gsClass=null,this.func=h;var u=[];this.check=function(t){for(var e,i,s,r,n=l.length,a=n;-1<--n;)(e=w[l[n]]||new b(l[n],[])).gsClass?(u[n]=e.gsClass,a--):t&&e.sc.push(this);if(0===a&&h){if(s=(i=("com.greensock."+o).split(".")).pop(),r=v(i.join("."))[s]=this.gsClass=h.apply(h,u),_)if(m[s]=p[s]=r,"undefined"!=typeof module&&module.exports)if(o===f)for(n in module.exports=p[f]=r,p)r[n]=p[n];else p[f]&&(p[f][s]=r);else"function"==typeof define&&define.amd&&define((c.GreenSockAMDPath?c.GreenSockAMDPath+"/":"")+o.split(".").pop(),[],function(){return r});for(n=0;n<this.sc.length;n++)this.sc[n].check()}},this.check(!0)},o=c._gsDefine=function(t,e,i,s){return new b(t,e,i,s)},P=u._class=function(t,e,i){return e=e||function(){},o(t,[],function(){return e},i),e};o.globals=m;var h=[0,0,1,1],S=P("easing.Ease",function(t,e,i,s){this._func=t,this._type=i||0,this._power=s||0,this._params=e?h.concat(e):h},!0),k=S.map={},_=S.register=function(t,e,i,s){for(var r,n,a,o,l=e.split(","),h=l.length,_=(i||"easeIn,easeOut,easeInOut").split(",");-1<--h;)for(n=l[h],r=s?P("easing."+n,null,!0):u.easing[n]||{},a=_.length;-1<--a;)o=_[a],k[n+"."+o]=k[o+n]=r[o]=t.getRatio?t:t[o]||new t};for((r=S.prototype)._calcEnd=!1,r.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,s=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?s*=s:2===i?s*=s*s:3===i?s*=s*s*s:4===i&&(s*=s*s*s*s),1===e?1-s:2===e?s:t<.5?s/2:1-s/2},i=(e=["Linear","Quad","Cubic","Quart","Quint,Strong"]).length;-1<--i;)r=e[i]+",Power"+i,_(new S(null,null,1,i),r,"easeOut",!0),_(new S(null,null,2,i),r,"easeIn"+(0===i?",easeNone":"")),_(new S(null,null,3,i),r,"easeInOut");k.linear=u.easing.Linear.easeIn,k.swing=u.easing.Quad.easeInOut;var O=P("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});(r=O.prototype).addEventListener=function(t,e,i,s,r){r=r||0;var n,a,o=this._listeners[t],l=0;for(this!==d||g||d.wake(),null==o&&(this._listeners[t]=o=[]),a=o.length;-1<--a;)(n=o[a]).c===e&&n.s===i?o.splice(a,1):0===l&&n.pr<r&&(l=a+1);o.splice(l,0,{c:e,s:i,up:s,pr:r})},r.removeEventListener=function(t,e){var i,s=this._listeners[t];if(s)for(i=s.length;-1<--i;)if(s[i].c===e)return void s.splice(i,1)},r.dispatchEvent=function(t){var e,i,s,r=this._listeners[t];if(r)for(1<(e=r.length)&&(r=r.slice(0)),i=this._eventTarget;-1<--e;)(s=r[e])&&(s.up?s.c.call(s.s||i,{type:t,target:i}):s.c.call(s.s||i))};var R=c.requestAnimationFrame,A=c.cancelAnimationFrame,C=Date.now||function(){return(new Date).getTime()},M=C();for(i=(e=["ms","moz","webkit","o"]).length;-1<--i&&!R;)R=c[e[i]+"RequestAnimationFrame"],A=c[e[i]+"CancelAnimationFrame"]||c[e[i]+"CancelRequestAnimationFrame"];P("Ticker",function(t,e){var r,n,a,o,l,h=this,_=C(),i=!(!1===e||!R)&&"auto",u=500,c=33,f=function(t){var e,i,s=C()-M;u<s&&(_+=s-c),M+=s,h.time=(M-_)/1e3,e=h.time-l,(!r||0<e||!0===t)&&(h.frame++,l+=e+(o<=e?.004:o-e),i=!0),!0!==t&&(a=n(f)),i&&h.dispatchEvent("tick")};O.call(h),h.time=h.frame=0,h.tick=function(){f(!0)},h.lagSmoothing=function(t,e){if(!arguments.length)return u<1e10;u=t||1e10,c=Math.min(e,u,0)},h.sleep=function(){null!=a&&(i&&A?A(a):clearTimeout(a),n=T,a=null,h===d&&(g=!1))},h.wake=function(t){null!==a?h.sleep():t?_+=-M+(M=C()):10<h.frame&&(M=C()-u+5),n=0===r?T:i&&R?R:function(t){return setTimeout(t,1e3*(l-h.time)+1|0)},h===d&&(g=!0),f(2)},h.fps=function(t){if(!arguments.length)return r;o=1/((r=t)||60),l=this.time+o,h.wake()},h.useRAF=function(t){if(!arguments.length)return i;h.sleep(),i=t,h.fps(r)},h.fps(t),setTimeout(function(){"auto"===i&&h.frame<5&&"hidden"!==(s||{}).visibilityState&&h.useRAF(!1)},1500)}),(r=u.Ticker.prototype=new u.events.EventDispatcher).constructor=u.Ticker;var D=P("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=!0===e.immediateRender,this.data=e.data,this._reversed=!0===e.reversed,$){g||d.wake();var i=this.vars.useFrames?H:$;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});d=D.ticker=new u.Ticker,(r=D.prototype)._dirty=r._gc=r._initted=r._paused=!1,r._totalTime=r._time=0,r._rawPrevTime=-1,r._next=r._last=r._onUpdate=r._timeline=r.timeline=null,r._paused=!1;var E=function(){g&&2e3<C()-M&&("hidden"!==(s||{}).visibilityState||!d.lagSmoothing())&&d.wake();var t=setTimeout(E,2e3);t.unref&&t.unref()};E(),r.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},r.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},r.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},r.seek=function(t,e){return this.totalTime(Number(t),!1!==e)},r.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,!1!==e,!0)},r.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},r.render=function(t,e,i){},r.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},r.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime(!0))>=i&&t<i+this.totalDuration()/this._timeScale-1e-7},r._enabled=function(t,e){return g||d.wake(),this._gc=!t,this._active=this.isActive(),!0!==e&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},r._kill=function(t,e){return this._enabled(!1,!1)},r.kill=function(t,e){return this._kill(t,e),this},r._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},r._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();-1<--e;)"{self}"===t[e]&&(i[e]=this);return i},r._callback=function(t){var e=this.vars,i=e[t],s=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this;switch(s?s.length:0){case 0:i.call(r);break;case 1:i.call(r,s[0]);break;case 2:i.call(r,s[0],s[1]);break;default:i.apply(r,s)}},r.eventCallback=function(t,e,i,s){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=x(i)&&-1!==i.join("").indexOf("{self}")?this._swapSelfInParams(i):i,r[t+"Scope"]=s),"onUpdate"===t&&(this._onUpdate=e)}return this},r.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},r.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&0<this._time&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},r.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},r.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},r.totalTime=function(t,e,i){if(g||d.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var s=this._totalDuration,r=this._timeline;if(s<t&&!i&&(t=s),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?s-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(L.length&&J(),this.render(t,e,!1),L.length&&J())}return this},r.progress=r.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},r.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},r.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},r.timeScale=function(t){if(!arguments.length)return this._timeScale;var e,i;for(t=t||y,this._timeline&&this._timeline.smoothChildTiming&&(i=(e=this._pauseTime)||0===e?e:this._timeline.totalTime(),this._startTime=i-(i-this._startTime)*this._timeScale/t),this._timeScale=t,i=this.timeline;i&&i.timeline;)i._dirty=!0,i.totalDuration(),i=i.timeline;return this},r.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},r.paused=function(t){if(!arguments.length)return this._paused;var e,i,s=this._timeline;return t!=this._paused&&s&&(g||t||d.wake(),i=(e=s.rawTime())-this._pauseTime,!t&&s.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=s.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var F=P("core.SimpleTimeline",function(t){D.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});(r=F.prototype=new D).constructor=F,r.kill()._gc=!1,r._first=r._last=r._recent=null,r._sortChildren=!1,r.add=r.insert=function(t,e,i,s){var r,n;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=this.rawTime()-(t._timeline.rawTime()-t._pauseTime)),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(n=t._startTime;r&&r._startTime>n;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},r._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},r.render=function(t,e,i){var s,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)s=r._next,(r._active||t>=r._startTime&&!r._paused&&!r._gc)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=s},r.rawTime=function(){return g||d.wake(),this._totalTime};var I=P("TweenLite",function(t,e,i){if(D.call(this,e,i),this.render=I.prototype.render,null==t)throw"Cannot tween a null target.";this.target=t="string"!=typeof t?t:I.selector(t)||t;var s,r,n,a=t.jquery||t.length&&t!==c&&t[0]&&(t[0]===c||t[0].nodeType&&t[0].style&&!t.nodeType),o=this.vars.overwrite;if(this._overwrite=o=null==o?Z[I.defaultOverwrite]:"number"==typeof o?o>>0:Z[o],(a||t instanceof Array||t.push&&x(t))&&"number"!=typeof t[0])for(this._targets=n=l(t),this._propLookup=[],this._siblings=[],s=0;s<n.length;s++)(r=n[s])?"string"!=typeof r?r.length&&r!==c&&r[0]&&(r[0]===c||r[0].nodeType&&r[0].style&&!r.nodeType)?(n.splice(s--,1),this._targets=n=n.concat(l(r))):(this._siblings[s]=tt(r,this,!1),1===o&&1<this._siblings[s].length&&it(r,this,null,1,this._siblings[s])):"string"==typeof(r=n[s--]=I.selector(r))&&n.splice(s+1,1):n.splice(s--,1);else this._propLookup={},this._siblings=tt(t,this,!1),1===o&&1<this._siblings.length&&it(t,this,null,1,this._siblings);(this.vars.immediateRender||0===e&&0===this._delay&&!1!==this.vars.immediateRender)&&(this._time=-y,this.render(Math.min(0,-this._delay)))},!0),z=function(t){return t&&t.length&&t!==c&&t[0]&&(t[0]===c||t[0].nodeType&&t[0].style&&!t.nodeType)};(r=I.prototype=new D).constructor=I,r.kill()._gc=!1,r.ratio=0,r._firstPT=r._targets=r._overwrittenProps=r._startAt=null,r._notifyPluginsOfEnabled=r._lazy=!1,I.version="2.0.2",I.defaultEase=r._ease=new S(null,null,1,1),I.defaultOverwrite="auto",I.ticker=d,I.autoSleep=120,I.lagSmoothing=function(t,e){d.lagSmoothing(t,e)},I.selector=c.$||c.jQuery||function(t){var e=c.$||c.jQuery;return e?(I.selector=e)(t):(s||(s=c.document),s?s.querySelectorAll?s.querySelectorAll(t):s.getElementById("#"===t.charAt(0)?t.substr(1):t):t)};var L=[],N={},X=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,B=/[\+-]=-?[\.\d]/,j=function(t){for(var e,i=this._firstPT;i;)e=i.blob?1===t&&null!=this.end?this.end:t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m.call(this._tween,e,this._target||i.t,this._tween):e<1e-6&&-1e-6<e&&!i.blob&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},U=function(t,e,i,s){var r,n,a,o,l,h,_,u=[],c=0,f="",p=0;for(u.start=t,u.end=e,t=u[0]=t+"",e=u[1]=e+"",i&&(i(u),t=u[0],e=u[1]),u.length=0,r=t.match(X)||[],n=e.match(X)||[],s&&(s._next=null,s.blob=1,u._firstPT=u._applyPT=s),l=n.length,o=0;o<l;o++)_=n[o],f+=(h=e.substr(c,e.indexOf(_,c)-c))||!o?h:",",c+=h.length,p?p=(p+1)%5:"rgba("===h.substr(-5)&&(p=1),_===r[o]||r.length<=o?f+=_:(f&&(u.push(f),f=""),a=parseFloat(r[o]),u.push(a),u._firstPT={_next:u._firstPT,t:u,p:u.length-1,s:a,c:("="===_.charAt(1)?parseInt(_.charAt(0)+"1",10)*parseFloat(_.substr(2)):parseFloat(_)-a)||0,f:0,m:p&&p<4?Math.round:0}),c+=_.length;return(f+=e.substr(c))&&u.push(f),u.setRatio=j,B.test(e)&&(u.end=null),u},Y=function(t,e,i,s,r,n,a,o,l){"function"==typeof s&&(s=s(l||0,t));var h=typeof t[e],_="function"!==h?"":e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),u="get"!==i?i:_?a?t[_](a):t[_]():t[e],c="string"==typeof s&&"="===s.charAt(1),f={t:t,p:e,s:u,f:"function"===h,pg:0,n:r||e,m:n?"function"==typeof n?n:Math.round:0,pr:0,c:c?parseInt(s.charAt(0)+"1",10)*parseFloat(s.substr(2)):parseFloat(s)-u||0};if(("number"!=typeof u||"number"!=typeof s&&!c)&&(a||isNaN(u)||!c&&isNaN(s)||"boolean"==typeof u||"boolean"==typeof s?(f.fp=a,f={t:U(u,c?parseFloat(f.s)+f.c+(f.s+"").replace(/[0-9\-\.]/g,""):s,o||I.defaultStringFilter,f),p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):(f.s=parseFloat(u),c||(f.c=parseFloat(s)-f.s||0))),f.c)return(f._next=this._firstPT)&&(f._next._prev=f),this._firstPT=f},q=I._internals={isArray:x,isSelector:z,lazyTweens:L,blobDif:U},V=I._plugins={},G=q.tweenLookup={},W=0,Q=q.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1,yoyoEase:1},Z={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},H=D._rootFramesTimeline=new F,$=D._rootTimeline=new F,K=30,J=q.lazyRender=function(){var t,e=L.length;for(N={};-1<--e;)(t=L[e])&&!1!==t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);L.length=0};$._startTime=d.time,H._startTime=d.frame,$._active=H._active=!0,setTimeout(J,1),D._updateRoot=I.render=function(){var t,e,i;if(L.length&&J(),$.render((d.time-$._startTime)*$._timeScale,!1,!1),H.render((d.frame-H._startTime)*H._timeScale,!1,!1),L.length&&J(),d.frame>=K){for(i in K=d.frame+(parseInt(I.autoSleep,10)||120),G){for(t=(e=G[i].tweens).length;-1<--t;)e[t]._gc&&e.splice(t,1);0===e.length&&delete G[i]}if((!(i=$._first)||i._paused)&&I.autoSleep&&!H._first&&1===d._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||d.sleep()}}},d.addEventListener("tick",D._updateRoot);var tt=function(t,e,i){var s,r,n=t._gsTweenID;if(G[n||(t._gsTweenID=n="t"+W++)]||(G[n]={target:t,tweens:[]}),e&&((s=G[n].tweens)[r=s.length]=e,i))for(;-1<--r;)s[r]===e&&s.splice(r,1);return G[n].tweens},et=function(t,e,i,s){var r,n,a=t.vars.onOverwrite;return a&&(r=a(t,e,i,s)),(a=I.onOverwrite)&&(n=a(t,e,i,s)),!1!==r&&!1!==n},it=function(t,e,i,s,r){var n,a,o,l;if(1===s||4<=s){for(l=r.length,n=0;n<l;n++)if((o=r[n])!==e)o._gc||o._kill(null,t,e)&&(a=!0);else if(5===s)break;return a}var h,_=e._startTime+y,u=[],c=0,f=0===e._duration;for(n=r.length;-1<--n;)(o=r[n])===e||o._gc||o._paused||(o._timeline!==e._timeline?(h=h||st(e,0,f),0===st(o,h,f)&&(u[c++]=o)):o._startTime<=_&&o._startTime+o.totalDuration()/o._timeScale>_&&((f||!o._initted)&&_-o._startTime<=2e-10||(u[c++]=o)));for(n=c;-1<--n;)if(l=(o=u[n])._firstPT,2===s&&o._kill(i,t,e)&&(a=!0),2!==s||!o._firstPT&&o._initted&&l){if(2!==s&&!et(o,e))continue;o._enabled(!1,!1)&&(a=!0)}return a},st=function(t,e,i){for(var s=t._timeline,r=s._timeScale,n=t._startTime;s._timeline;){if(n+=s._startTime,r*=s._timeScale,s._paused)return-100;s=s._timeline}return e<(n/=r)?n-e:i&&n===e||!t._initted&&n-e<2*y?y:(n+=t.totalDuration()/t._timeScale/r)>e+y?0:n-e-y};r._init=function(){var t,e,i,s,r,n,a=this.vars,o=this._overwrittenProps,l=this._duration,h=!!a.immediateRender,_=a.ease;if(a.startAt){for(s in this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={},a.startAt)r[s]=a.startAt[s];if(r.data="isStart",r.overwrite=!1,r.immediateRender=!0,r.lazy=h&&!1!==a.lazy,r.startAt=r.delay=null,r.onUpdate=a.onUpdate,r.onUpdateParams=a.onUpdateParams,r.onUpdateScope=a.onUpdateScope||a.callbackScope||this,this._startAt=I.to(this.target||{},0,r),h)if(0<this._time)this._startAt=null;else if(0!==l)return}else if(a.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{for(s in 0!==this._time&&(h=!1),i={},a)Q[s]&&"autoCSS"!==s||(i[s]=a[s]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&!1!==a.lazy,i.immediateRender=h,this._startAt=I.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=_=_?_ instanceof S?_:"function"==typeof _?new S(_,a.easeParams):k[_]||I.defaultEase:I.defaultEase,a.easeParams instanceof Array&&_.config&&(this._ease=_.config.apply(_,a.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(n=this._targets.length,t=0;t<n;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],o?o[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,o,0);if(e&&I._onPluginEvent("_onInitAllProps",this),o&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),a.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=a.onUpdate,this._initted=!0},r._initProps=function(t,e,i,s,r){var n,a,o,l,h,_;if(null==t)return!1;for(n in N[t._gsTweenID]&&J(),this.vars.css||t.style&&t!==c&&t.nodeType&&V.css&&!1!==this.vars.autoCSS&&function(t,e){var i,s={};for(i in t)Q[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!V[i]||V[i]&&V[i]._autoCSS)||(s[i]=t[i],delete t[i]);t.css=s}(this.vars,t),this.vars)if(_=this.vars[n],Q[n])_&&(_ instanceof Array||_.push&&x(_))&&-1!==_.join("").indexOf("{self}")&&(this.vars[n]=_=this._swapSelfInParams(_,this));else if(V[n]&&(l=new V[n])._onInitTween(t,this.vars[n],this,r)){for(this._firstPT=h={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:1,n:n,pg:1,pr:l._priority,m:0},a=l._overwriteProps.length;-1<--a;)e[l._overwriteProps[a]]=this._firstPT;(l._priority||l._onInitAllProps)&&(o=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0),h._next&&(h._next._prev=h)}else e[n]=Y.call(this,t,n,"get",_,n,0,null,this.vars.stringFilter,r);return s&&this._kill(s,t)?this._initProps(t,e,i,s,r):1<this._overwrite&&this._firstPT&&1<i.length&&it(t,this,e,this._overwrite,i)?(this._kill(e,t),this._initProps(t,e,i,s,r)):(this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration)&&(N[t._gsTweenID]=!0),o)},r.render=function(t,e,i){var s,r,n,a,o=this._time,l=this._duration,h=this._rawPrevTime;if(l-1e-7<=t&&0<=t)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(s=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&-1e-7<=t||h===y&&"isPause"!==this.data)&&h!==t&&(i=!0,y<h&&(r="onReverseComplete")),this._rawPrevTime=a=!e||t||h===t?t:y);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==o||0===l&&0<h)&&(r="onReverseComplete",s=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(0<=h&&(h!==y||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=a=!e||t||h===t?t:y)),(!this._initted||this._startAt&&this._startAt.progress())&&(i=!0);else if(this._totalTime=this._time=t,this._easeType){var _=t/l,u=this._easeType,c=this._easePower;(1===u||3===u&&.5<=_)&&(_=1-_),3===u&&(_*=2),1===c?_*=_:2===c?_*=_*_:3===c?_*=_*_*_:4===c&&(_*=_*_*_*_),this.ratio=1===u?1-_:2===u?_:t/l<.5?_/2:1-_/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==o||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(!1!==this.vars.lazy&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=o,this._rawPrevTime=h,L.push(this),void(this._lazy=[t,e]);this._time&&!s?this.ratio=this._ease.getRatio(this._time/l):s&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(!1!==this._lazy&&(this._lazy=!1),this._active||!this._paused&&this._time!==o&&0<=t&&(this._active=!0),0===o&&(this._startAt&&(0<=t?this._startAt.render(t,!0,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),n=this._firstPT;n;)n.f?n.t[n.p](n.c*this.ratio+n.s):n.t[n.p]=n.c*this.ratio+n.s,n=n._next;this._onUpdate&&(t<0&&this._startAt&&-1e-4!==t&&this._startAt.render(t,!0,i),e||(this._time!==o||s||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&-1e-4!==t&&this._startAt.render(t,!0,i),s&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===y&&a!==y&&(this._rawPrevTime=0)))}},r._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:I.selector(e)||e;var s,r,n,a,o,l,h,_,u,c=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline,f=this._firstPT;if((x(e)||z(e))&&"number"!=typeof e[0])for(s=e.length;-1<--s;)this._kill(t,e[s],i)&&(l=!0);else{if(this._targets){for(s=this._targets.length;-1<--s;)if(e===this._targets[s]){o=this._propLookup[s]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[s]=t?this._overwrittenProps[s]||{}:"all";break}}else{if(e!==this.target)return!1;o=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(o){if(h=t||o,_=t!==r&&"all"!==r&&t!==o&&("object"!=typeof t||!t._tempKill),i&&(I.onOverwrite||this.vars.onOverwrite)){for(n in h)o[n]&&(u||(u=[]),u.push(n));if((u||!t)&&!et(this,i,e,u))return!1}for(n in h)(a=o[n])&&(c&&(a.f?a.t[a.p](a.s):a.t[a.p]=a.s,l=!0),a.pg&&a.t._kill(h)&&(l=!0),a.pg&&0!==a.t._overwriteProps.length||(a._prev?a._prev._next=a._next:a===this._firstPT&&(this._firstPT=a._next),a._next&&(a._next._prev=a._prev),a._next=a._prev=null),delete o[n]),_&&(r[n]=1);!this._firstPT&&this._initted&&f&&this._enabled(!1,!1)}}return l},r.invalidate=function(){return this._notifyPluginsOfEnabled&&I._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],D.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-y,this.render(Math.min(0,-this._delay))),this},r._enabled=function(t,e){if(g||d.wake(),t&&this._gc){var i,s=this._targets;if(s)for(i=s.length;-1<--i;)this._siblings[i]=tt(s[i],this,!0);else this._siblings=tt(this.target,this,!0)}return D.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&I._onPluginEvent(t?"_onEnable":"_onDisable",this)},I.to=function(t,e,i){return new I(t,e,i)},I.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new I(t,e,i)},I.fromTo=function(t,e,i,s){return s.startAt=i,s.immediateRender=0!=s.immediateRender&&0!=i.immediateRender,new I(t,e,s)},I.delayedCall=function(t,e,i,s,r){return new I(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:s,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},I.set=function(t,e){return new I(t,0,e)},I.getTweensOf=function(t,e){if(null==t)return[];var i,s,r,n;if(t="string"!=typeof t?t:I.selector(t)||t,(x(t)||z(t))&&"number"!=typeof t[0]){for(i=t.length,s=[];-1<--i;)s=s.concat(I.getTweensOf(t[i],e));for(i=s.length;-1<--i;)for(n=s[i],r=i;-1<--r;)n===s[r]&&s.splice(i,1)}else if(t._gsTweenID)for(i=(s=tt(t).concat()).length;-1<--i;)(s[i]._gc||e&&!s[i].isActive())&&s.splice(i,1);return s||[]},I.killTweensOf=I.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var s=I.getTweensOf(t,e),r=s.length;-1<--r;)s[r]._kill(i,t)};var rt=P("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=rt.prototype},!0);if(r=rt.prototype,rt.version="1.19.0",rt.API=2,r._firstPT=null,r._addTween=Y,r.setRatio=j,r._kill=function(t){var e,i=this._overwriteProps,s=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;-1<--e;)null!=t[i[e]]&&i.splice(e,1);for(;s;)null!=t[s.n]&&(s._next&&(s._next._prev=s._prev),s._prev?(s._prev._next=s._next,s._prev=null):this._firstPT===s&&(this._firstPT=s._next)),s=s._next;return!1},r._mod=r._roundProps=function(t){for(var e,i=this._firstPT;i;)(e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")])&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},I._onPluginEvent=function(t,e){var i,s,r,n,a,o=e._firstPT;if("_onInitAllProps"===t){for(;o;){for(a=o._next,s=r;s&&s.pr>o.pr;)s=s._next;(o._prev=s?s._prev:n)?o._prev._next=o:r=o,(o._next=s)?s._prev=o:n=o,o=a}o=e._firstPT=r}for(;o;)o.pg&&"function"==typeof o.t[t]&&o.t[t]()&&(i=!0),o=o._next;return i},rt.activate=function(t){for(var e=t.length;-1<--e;)t[e].API===rt.API&&(V[(new t[e])._propName]=t[e]);return!0},o.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,s=t.priority||0,r=t.overwriteProps,n={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},a=P("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){rt.call(this,i,s),this._overwriteProps=r||[]},!0===t.global),o=a.prototype=new rt(i);for(e in(o.constructor=a).API=t.API,n)"function"==typeof t[e]&&(o[n[e]]=t[e]);return a.version=t.version,rt.activate([a]),a},e=c._gsQueue){for(i=0;i<e.length;i++)e[i]();for(r in w)w[r].func||c.console.log("GSAP encountered missing dependency: "+r)}g=!1}("undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window,"TweenMax");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,