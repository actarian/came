{"version":3,"names":[],"mappings":"","sources":["src/app/main.ts"],"sourcesContent":["import { MtmControlEnum, USE_CALCULATED_PRICE } from \"./controls/constants\";\nimport { MtmControl } from \"./controls/control\";\nimport { MtmValue } from \"./controls/value\";\nimport MtmDataService from \"./data.service\";\nimport Dom from \"./utils/dom\";\n\nexport default class MtmConfigurator {\n\n\telement: HTMLElement;\n\toptions: MtmControl[];\n\tcols: MtmControl[] = [];\n\trows: number[][] = [];\n\tfilteredRows: any[] = [];\n\trow: number[] = null;\n\tcurrentKey: MtmControlEnum = MtmControlEnum.ApartmentNumber;\n\n\tconstructor(selector: string) {\n\t\tthis.element = document.querySelector(selector) as HTMLElement;\n\t\tthis.addMediaScrollListener();\n\t\tthis.addRecapScrollListener();\n\t\tMtmDataService.fetch((cols: MtmControl[], rows: number[][]) => {\n\t\t\tthis.cols = cols;\n\t\t\tthis.rows = rows;\n\t\t\tlet options = [\n\t\t\t\tMtmDataService.newControlByKey(MtmControlEnum.KnownTecnology),\n\t\t\t\tMtmDataService.newControlByKey(MtmControlEnum.ConstrainedDimension),\n\t\t\t\tMtmDataService.newControlByKey(MtmControlEnum.ApartmentNumber),\n\t\t\t\tMtmDataService.newControlByKey(MtmControlEnum.CallButtons),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.AudioVideo),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.Keypad),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.Proximity),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.DigitalDisplay),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.InfoModule),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.HearingModule),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.Finish),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.Mount),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.System),\n\t\t\t\tMtmDataService.optionWithKey(MtmControlEnum.ModuleSize),\n\t\t\t];\n\t\t\toptions.forEach(x => x.didChange = (item: MtmValue, control: MtmControl) => {\n\t\t\t\t// console.log('MtmConfigurator.didChange', control.key, item);\n\t\t\t\tswitch (control.key) {\n\t\t\t\t\tcase MtmControlEnum.KnownTecnology:\n\t\t\t\t\tcase MtmControlEnum.ConstrainedDimension:\n\t\t\t\t\t\tthis.doReorder();\n\t\t\t\t\t\tthis.onSearch(this.didSelectCallButton());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MtmControlEnum.ApartmentNumber:\n\t\t\t\t\t\tthis.onSearch(this.didSelectCallButton());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MtmControlEnum.CallButtons:\n\t\t\t\t\t\tthis.onSearch(this.didSelectCallButton());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.onSearch(control.key);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.options = options;\n\t\t\tthis.render();\n\t\t\tthis.onSearch(this.didSelectCallButton());\n\t\t\tthis.element.querySelector('.media>.picture').addEventListener('click', () => {\n\t\t\t\tthis.toggleResults();\n\t\t\t});\n\n\t\t}, (error: any) => {\n\t\t\tconsole.log('error', error);\n\n\t\t});\n\t}\n\n\tdidSelectCallButton(): MtmControlEnum {\n\t\tlet key: MtmControlEnum;\n\t\tconst callButtons = this.options.find(x => x.key === MtmControlEnum.CallButtons);\n\t\tif (callButtons.selected) {\n\t\t\tconst apartmentNumber = this.options.find(x => x.key === MtmControlEnum.ApartmentNumber);\n\t\t\tconst buttons = MtmDataService.optionWithKey(MtmControlEnum.Buttons);\n\t\t\tconst divided = MtmDataService.optionWithKey(MtmControlEnum.Divided);\n\t\t\tconst digi = MtmDataService.optionWithKey(MtmControlEnum.Digi);\n\t\t\tlet apartmentNumberValue = apartmentNumber.selected.value;\n\t\t\tif (callButtons.selected.id === 2) {\n\t\t\t\tapartmentNumberValue = Math.ceil(apartmentNumberValue / 2) * 2;\n\t\t\t}\n\t\t\tconst firstValue = buttons.values.find(v => v.value >= apartmentNumberValue);\n\t\t\tif (!firstValue && callButtons.selected.id < 3) {\n\t\t\t\tcallButtons.onSelect(callButtons.values.find(x => x.id == 3), true);\n\t\t\t}\n\t\t\t// console.log('firstValue', firstValue);\n\t\t\tswitch (callButtons.selected.id) {\n\t\t\t\tcase 1:\n\t\t\t\t\t// pulsante singolo\n\t\t\t\t\tbuttons.onSelect(firstValue);\n\t\t\t\t\tdivided.onSelect(divided.values.find(x => x.id === 1));\n\t\t\t\t\tdigi.onSelect(null);\n\t\t\t\t\tkey = MtmControlEnum.Buttons;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t// pulsante doppio\n\t\t\t\t\tbuttons.onSelect(firstValue);\n\t\t\t\t\tdivided.onSelect(divided.values.find(x => x.id === 2));\n\t\t\t\t\tdigi.onSelect(null);\n\t\t\t\t\tkey = MtmControlEnum.Divided;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t// digital keypad\n\t\t\t\t\tbuttons.onSelect(null);\n\t\t\t\t\tdivided.onSelect(divided.values.find(x => x.id === 1));\n\t\t\t\t\tdigi.onSelect(digi.values.find(x => x.name === 'DIGI'));\n\t\t\t\t\tkey = MtmControlEnum.Keypad;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\t// digital keypad + DIGI 1\n\t\t\t\t\tbuttons.onSelect(null);\n\t\t\t\t\tdivided.onSelect(divided.values.find(x => x.id === 1));\n\t\t\t\t\tdigi.onSelect(digi.values.find(x => x.name === 'DIGI1'));\n\t\t\t\t\tkey = MtmControlEnum.Digi;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t// digital keypad + DIGI 2\n\t\t\t\t\tbuttons.onSelect(null);\n\t\t\t\t\tdivided.onSelect(divided.values.find(x => x.id === 2));\n\t\t\t\t\tdigi.onSelect(digi.values.find(x => x.name === 'DIGI2D'));\n\t\t\t\t\tkey = MtmControlEnum.Digi;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*\n\t\t\tconsole.log(\n\t\t\t\t'apartmentNumber', apartmentNumberValue,\n\t\t\t\t'buttons', buttons.selected.id,\n\t\t\t\t'divided', divided.selected.id,\n\t\t\t\t'digi', digi.selected.id\n\t\t\t);\n\t\t\t*/\n\t\t}\n\t\treturn key;\n\t}\n\n\tdoReorder() {\n\t\tconst controls = [];\n\t\tconst knownTecnology = this.options.find(x => x.key === MtmControlEnum.KnownTecnology);\n\t\tconst system = this.options.find(x => x.key === MtmControlEnum.System);\n\t\tconst constrainedDimension = this.options.find(x => x.key === MtmControlEnum.ConstrainedDimension);\n\t\tconst moduleSize = this.options.find(x => x.key === MtmControlEnum.ModuleSize);\n\t\tcontrols.push(knownTecnology.element);\n\t\tif (knownTecnology.currentItem.id === 2) {\n\t\t\tcontrols.push(system.element);\n\t\t}\n\t\tcontrols.push(constrainedDimension.element);\n\t\tif (constrainedDimension.currentItem.id === 2) {\n\t\t\tcontrols.push(moduleSize.element);\n\t\t}\n\t\tconst apartmentNumber = this.options.find(x => x.key === MtmControlEnum.ApartmentNumber);\n\t\tconst callButtons = this.options.find(x => x.key === MtmControlEnum.CallButtons);\n\t\tconst audioVideo = this.options.find(x => x.key === MtmControlEnum.AudioVideo);\n\t\tconst keypad = this.options.find(x => x.key === MtmControlEnum.Keypad);\n\t\tconst proximity = this.options.find(x => x.key === MtmControlEnum.Proximity);\n\t\tconst digitalDisplay = this.options.find(x => x.key === MtmControlEnum.DigitalDisplay);\n\t\tconst infoModule = this.options.find(x => x.key === MtmControlEnum.InfoModule);\n\t\tconst hearingModule = this.options.find(x => x.key === MtmControlEnum.HearingModule);\n\t\tconst finish = this.options.find(x => x.key === MtmControlEnum.Finish);\n\t\tconst mount = this.options.find(x => x.key === MtmControlEnum.Mount);\n\t\tcontrols.push(apartmentNumber.element);\n\t\tcontrols.push(callButtons.element);\n\t\tcontrols.push(audioVideo.element);\n\t\tcontrols.push(keypad.element);\n\t\tcontrols.push(proximity.element);\n\t\tcontrols.push(digitalDisplay.element);\n\t\tcontrols.push(infoModule.element);\n\t\tcontrols.push(hearingModule.element);\n\t\tcontrols.push(finish.element);\n\t\tcontrols.push(mount.element);\n\t\tif (knownTecnology.currentItem.id === 1) {\n\t\t\tcontrols.push(system.element);\n\t\t}\n\t\tif (constrainedDimension.currentItem.id === 1) {\n\t\t\tcontrols.push(moduleSize.element);\n\t\t}\n\t\t// const controls = this.options.map(x => x.element);\n\t\t// controls.unshift(controls.pop());\n\t\tthis.options.map(x => x.element).forEach(x => {\n\t\t\tif (x.parentNode) {\n\t\t\t\tx.parentNode.removeChild(x);\n\t\t\t}\n\t\t})\n\t\tconst outlet = this.element.querySelector('.options-outlet') as HTMLElement;\n\t\tcontrols.forEach(x => outlet.appendChild(x));\n\t\t// console.log('doReorder');\n\t}\n\n\tgetRows(key?: MtmControlEnum) {\n\t\tthis.currentKey = key;\n\t\tconst knownTecnology = this.options.find(x => x.key === MtmControlEnum.KnownTecnology);\n\t\tconst constrainedDimension = this.options.find(x => x.key === MtmControlEnum.ConstrainedDimension);\n\t\tconst controls = this.options.map(x => {\n\t\t\tconst index = this.cols.indexOf(x);\n\t\t\tif (index !== -1 && x.key !== key) {\n\t\t\t\tswitch (x.key) {\n\t\t\t\t\tcase MtmControlEnum.System:\n\t\t\t\t\t\tx.lazy = knownTecnology.selected.id !== 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase MtmControlEnum.ModuleSize:\n\t\t\t\t\t\tx.lazy = constrainedDimension.selected.id !== 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn x;\n\t\t\t} else {\n\t\t\t\treturn { index };\n\t\t\t}\n\t\t}).filter(x => x.index !== -1).map(x => x as MtmControl).filter(x => x.selected && x.selected.id !== -1);\n\t\tconst buttons = MtmDataService.optionWithKey(MtmControlEnum.Buttons);\n\t\tif (buttons.selected.id !== -1) {\n\t\t\t// console.log(buttons.index);\n\t\t\t// console.log('onSearch', buttons.selected.id);\n\t\t\tcontrols.unshift(buttons);\n\t\t}\n\t\tconst divided = MtmDataService.optionWithKey(MtmControlEnum.Divided);\n\t\tif (divided.selected.id !== -1) {\n\t\t\t// console.log('onSearch', divided.selected.id);\n\t\t\tcontrols.unshift(divided);\n\t\t}\n\t\tconst digi = MtmDataService.optionWithKey(MtmControlEnum.Digi);\n\t\tif (digi.selected.id !== -1) {\n\t\t\t// console.log('onSearch', digi.selected.id);\n\t\t\tcontrols.unshift(digi);\n\t\t}\n\t\tif (key) {\n\t\t\t// force clicked item\n\t\t\tcontrols.unshift(MtmDataService.optionWithKey(key));\n\t\t}\n\t\tlet filteredRows = this.rows.filter(x => {\n\t\t\treturn controls.reduce((has, c) => {\n\t\t\t\tif (c.lazy && c.key !== key) {\n\t\t\t\t\treturn has;\n\t\t\t\t} else {\n\t\t\t\t\treturn has && x[c.index] === c.selected.id;\n\t\t\t\t}\n\t\t\t}, true);\n\t\t});\n\t\tconst lazyControls = controls.filter(c => c.lazy);\n\t\t// console.log(controls.filter(c => c.lazy).map(x => x.key + ':' + x.selected.id));\n\t\tlazyControls.forEach(c => {\n\t\t\tconst strictRows = filteredRows.filter(x => x[c.index] === c.selected.id);\n\t\t\t/*\n\t\t\tif (c.key === MtmControlEnum.Buttons) {\n\t\t\t\tfilteredRows.forEach(x => {\n\t\t\t\t\tconsole.log(c.key, c.selected.id, x[c.index]);\n\t\t\t\t});\n\t\t\t}\n\t\t\t*/\n\t\t\tif (strictRows.length) {\n\t\t\t\tfilteredRows = strictRows;\n\t\t\t}\n\t\t});\n\t\treturn filteredRows;\n\t}\n\n\tonSearch(key?: MtmControlEnum) {\n\t\tconst filteredRows = this.getRows(key);\n\t\t// console.log(filteredRows.length);\n\t\tif (filteredRows.length > 0) {\n\t\t\tconst row = filteredRows[0];\n\t\t\tthis.setRow(row);\n\t\t}\n\t\tDom.log('results', filteredRows.length);\n\t\tthis.filteredRows = filteredRows;\n\t}\n\n\ttoggleResults() {\n\t\tconst filteredRows = this.filteredRows;\n\t\tif (filteredRows.length > 1) {\n\t\t\tconst index = (filteredRows.indexOf(this.row) + 1) % filteredRows.length;\n\t\t\tthis.setRow(filteredRows[index]);\n\t\t}\n\t}\n\n\tcalcOptions(row: number[]) {\n\t\tconst prices = MtmDataService.optionWithKey(MtmControlEnum.Price);\n\t\tconst controls = [\n\t\t\t// MtmControlEnum.CallButtons,\n\t\t\tMtmControlEnum.AudioVideo,\n\t\t\tMtmControlEnum.Keypad,\n\t\t\tMtmControlEnum.Proximity,\n\t\t\tMtmControlEnum.DigitalDisplay,\n\t\t\tMtmControlEnum.InfoModule,\n\t\t\tMtmControlEnum.HearingModule,\n\t\t\tMtmControlEnum.Finish,\n\t\t\tMtmControlEnum.Mounting,\n\t\t\tMtmControlEnum.System,\n\t\t\tMtmControlEnum.ModuleSize,\n\t\t].map(key => MtmDataService.optionWithKey(key));\n\t\tconst currentControl = MtmDataService.optionWithKey(this.currentKey);\n\t\tif (controls.indexOf(currentControl) > 0) {\n\t\t\tcontrols.splice(controls.indexOf(currentControl), 1);\n\t\t\tcontrols.unshift(currentControl);\n\t\t}\n\t\tcontrols.forEach(control => {\n\t\t\tconst query = row.slice();\n\t\t\tlet minimumPrice = Number.POSITIVE_INFINITY, count = 0;\n\t\t\tcontrol.values.forEach(v => {\n\t\t\t\tquery[control.index] = v.id;\n\t\t\t\tlet rows = this.rows.filter(r => {\n\t\t\t\t\treturn controls.reduce((has, c, i) => {\n\t\t\t\t\t\tif (c === control) {\n\t\t\t\t\t\t\treturn has && r[c.index] === query[c.index];\n\t\t\t\t\t\t} else if (c.lazy && c.key !== this.currentKey) {\n\t\t\t\t\t\t\treturn has;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn has && r[c.index] === query[c.index];\n\t\t\t\t\t\t}\n\t\t\t\t\t}, true);\n\t\t\t\t});\n\t\t\t\tcontrols.filter(c => c.lazy).forEach(c => {\n\t\t\t\t\tconst strictRows = rows.filter(x => x[c.index] === query[c.index]);\n\t\t\t\t\tif (true || strictRows.length) {\n\t\t\t\t\t\trows = strictRows;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (USE_CALCULATED_PRICE) {\n\t\t\t\t\tif (rows.length > 0) {\n\t\t\t\t\t\tconst rowPrice = prices.values.find(v => v.id === rows[0][prices.index]).value;\n\t\t\t\t\t\tv.price = rowPrice;\n\t\t\t\t\t\tv.disabled = false;\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tv.price = 0;\n\t\t\t\t\t\tv.disabled = true;\n\t\t\t\t\t}\n\t\t\t\t\tminimumPrice = Math.min(v.price, minimumPrice);\n\t\t\t\t} else {\n\t\t\t\t\tif (rows.length > 0) {\n\t\t\t\t\t\tv.price = 0;\n\t\t\t\t\t\tif (MtmDataService.partsKeys.indexOf(control.key) !== -1) {\n\t\t\t\t\t\t\tconst part = MtmDataService.partsPool[v.value];\n\t\t\t\t\t\t\tif (part) {\n\t\t\t\t\t\t\t\tv.price = part.price;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconsole.log(control.key, v.price, v, part);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tv.disabled = false;\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tv.price = 0;\n\t\t\t\t\t\tv.disabled = true;\n\t\t\t\t\t}\n\t\t\t\t\tv.updatePrice(control.element);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (USE_CALCULATED_PRICE) {\n\t\t\t\tcontrol.values.forEach(v => {\n\t\t\t\t\tconst rowPrice = v.price;\n\t\t\t\t\tif (count > 1) {\n\t\t\t\t\t\tv.price -= minimumPrice;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tv.price = 0;\n\t\t\t\t\t}\n\t\t\t\t\tv.updatePrice(control.element);\n\t\t\t\t\t// console.log(control.key, v.name, rowPrice, v.price, v.disabled ? 'disabled' : '');\n\t\t\t\t});\n\t\t\t}\n\t\t\tcontrol.updateState();\n\t\t});\n\t}\n\n\tsetRow(row: number[]) {\n\t\tthis.row = row;\n\t\tconst result: any = {};\n\t\tthis.cols.forEach((c, i) => {\n\t\t\tif (row[i]) {\n\t\t\t\tconst value = c.values.find(v => v.id === row[i]);\n\t\t\t\tif (value) {\n\t\t\t\t\tresult[c.key] = value.name;\n\t\t\t\t\tc.onSelect(value, true);\n\t\t\t\t} else {\n\t\t\t\t\tresult[c.key] = '-';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult[c.key] = null;\n\t\t\t}\n\t\t});\n\t\tconst price = parseFloat(result.price);\n\t\tthis.element.querySelectorAll('.result-price').forEach(x => x.innerHTML = `€ ${price.toFixed(2)}`);\n\t\tthis.element.querySelector('.result-code').innerHTML = result.code;\n\t\tconst keys = [MtmControlEnum.Module1, MtmControlEnum.Module2, MtmControlEnum.Module3, MtmControlEnum.Module4]\n\t\tconst descriptions: string[] = [];\n\t\tkeys.forEach(x => {\n\t\t\tconst value: string = result[x];\n\t\t\tif (value !== '-') {\n\t\t\t\tdescriptions.push(MtmDataService.parts.find(x => x.id === parseInt(value)).shortDescription);\n\t\t\t}\n\t\t});\n\t\tthis.element.querySelector('.result-description').innerHTML = descriptions.join(', ');\n\t\tthis.element.querySelector('.result-finish').innerHTML = result.finish;\n\t\tthis.element.querySelector('.result-system').innerHTML = result.system;\n\t\tthis.element.querySelector('.result-mount').innerHTML = result.mount;\n\t\tthis.element.querySelector('.result-cta').setAttribute('href', `https://came.yetnot.it/it/${result.code.replace(/\\//g, '|')}`);\n\t\tconst picture = this.element.querySelector('.media>.picture');\n\t\tpicture.classList.add('loading');\n\t\tconst image = new Image();\n\t\timage.onload = () => {\n\t\t\tpicture.classList.remove('loading');\n\t\t\tpicture.querySelectorAll('img').forEach(x => x.parentNode.removeChild(x));\n\t\t\tpicture.appendChild(image);\n\t\t}\n\t\timage.src = 'https://came.yetnot.it/came_configurator/build_kit_image/' + result.code.replace(/\\//g, '|');\n\t\tthis.calcOptions(row);\n\t\tDom.log('setRow', result);\n\t}\n\n\trender() {\n\t\tconst outlet = this.element.querySelector('.options-outlet') as HTMLElement;\n\t\tthis.options.map(x => x.render()).forEach(x => outlet.appendChild(x));\n\t\t// console.log('render.outlet', outlet);\n\t}\n\n\taddMediaScrollListener() {\n\t\tconst sidebar = this.element.querySelector('.sidebar') as HTMLElement;\n\t\tconst media = this.element.querySelector('.media') as HTMLElement;\n\t\t// const picture = media.querySelector('.picture') as HTMLElement;\n\t\tconst onScroll = () => {\n\t\t\tconst rect: ClientRect | DOMRect = sidebar.getBoundingClientRect();\n\t\t\tif (rect.top < 60) {\n\t\t\t\tmedia.classList.add('fixed');\n\t\t\t} else {\n\t\t\t\tmedia.classList.remove('fixed');\n\t\t\t}\n\t\t};\n\t\tonScroll();\n\t\twindow.addEventListener('scroll', onScroll, false);\n\t}\n\n\taddRecapScrollListener() {\n\t\tconst inner = this.element.querySelector('.section--recap--fixed > .inner') as HTMLElement;\n\t\tvar lastScrollTop = Dom.scrollTop();\n\t\tconst onScroll = () => {\n\t\t\tvar scrollTop = Dom.scrollTop();\n\t\t\tif (scrollTop > lastScrollTop) {\n\t\t\t\tinner.classList.add('fixed');\n\t\t\t} else {\n\t\t\t\tinner.classList.remove('fixed');\n\t\t\t}\n\t\t\tlastScrollTop = scrollTop <= 0 ? 0 : scrollTop; // For Mobile or negative scrolling\n\t\t};\n\t\tonScroll();\n\t\twindow.addEventListener('scroll', onScroll, false);\n\t}\n\n}\n\nconst configurator = new MtmConfigurator(`.configurator`);\n"],"file":"docs/js/main.js"}